-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=87.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=28,HLS_SYN_FF=3230,HLS_SYN_LUT=4094}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_pp0_stg0_fsm_26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_pp0_stg1_fsm_27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_st38_fsm_28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_st39_fsm_29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_st40_fsm_30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_st41_fsm_31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_st42_fsm_32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_st43_fsm_33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_st44_fsm_34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_st45_fsm_35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_st46_fsm_36 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_37 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_38 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_39 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_40 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_41 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_42 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_43 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv48_1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_61 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal CHout_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Sy_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_en_V : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal W : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_sig_cseq_ST_pp0_stg1_fsm_27 : STD_LOGIC;
    signal ap_sig_139 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal exitcond2_reg_1740 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_26 : STD_LOGIC;
    signal ap_sig_162 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond2_reg_1740_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_29 : STD_LOGIC;
    signal ap_sig_183 : BOOLEAN;
    signal ap_sig_cseq_ST_st46_fsm_36 : STD_LOGIC;
    signal ap_sig_191 : BOOLEAN;
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_sig_cseq_ST_st47_fsm_37 : STD_LOGIC;
    signal ap_sig_200 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_sig_cseq_ST_st48_fsm_38 : STD_LOGIC;
    signal ap_sig_208 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_sig_cseq_ST_st53_fsm_43 : STD_LOGIC;
    signal ap_sig_216 : BOOLEAN;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_reg_374 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_16_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_sig_345 : BOOLEAN;
    signal relu_en_V_read_reg_1394 : STD_LOGIC_VECTOR (0 downto 0);
    signal Sy_V_read_reg_1399 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_V_read_reg_1404 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V_read_reg_1409 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_V_read_reg_1414 : STD_LOGIC_VECTOR (7 downto 0);
    signal CHout_V_read_reg_1420 : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V_read_reg_1426 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_1431 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_1438 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_reg_1443 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_10_reg_1448 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_16_reg_1453 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_s_fu_602_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_reg_1458 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_fu_610_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_reg_1463 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_2_cast_fu_630_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_2_cast_reg_1468 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_4_cast_fu_680_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_4_cast_reg_1483 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_cast_fu_718_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_10_cast_reg_1499 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_404 : BOOLEAN;
    signal grp_fu_662_ap_done : STD_LOGIC;
    signal grp_fu_712_ap_done : STD_LOGIC;
    signal tmp_16_cast_fu_721_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_cast_reg_1504 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_17_cast_fu_724_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_17_cast_reg_1509 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_21_cast_fu_727_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_21_cast_reg_1514 : STD_LOGIC_VECTOR (47 downto 0);
    signal Wout_V_fu_734_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Wout_V_reg_1519 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_750_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1524 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_753_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1529 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_4_cast_fu_756_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_4_cast_reg_1534 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_1540 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_763_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_1547 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_766_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_1553 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_2_fu_769_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_reg_1558 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_16_cast_fu_772_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_16_cast_reg_1563 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_12_cast_fu_775_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_12_cast_reg_1568 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_13_cast_fu_778_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_13_cast_reg_1575 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_V_14_cast_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_14_cast_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_787_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_reg_1586 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound4_fu_797_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_reg_1591 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound1_fu_807_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound1_reg_1596 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond_mid_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid_reg_1601 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_10_fu_826_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_10_reg_1606 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_458 : BOOLEAN;
    signal indvar_flatten_next1_fu_836_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal indvar_flatten_next1_reg_1614 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond_flatten2_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_1619 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid1_fu_852_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid1_reg_1628 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_12_mid2_fu_865_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_12_mid2_reg_1635 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1388_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_reg_1641 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_mid2_v_fu_886_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_mid2_v_reg_1646 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_480 : BOOLEAN;
    signal tmp_10_mid2_cast_fu_893_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_mid2_cast_reg_1651 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_cast_mid2_fu_897_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_mid2_reg_1656 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_mid2_fu_932_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_mid2_reg_1662 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_10_mid2_fu_942_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_10_mid2_reg_1668 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_op_assign_10_mid2_fu_949_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_10_mid2_reg_1673 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_12_cast7_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_12_cast7_reg_1678 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_501 : BOOLEAN;
    signal indvar_flatten_next_fu_988_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_next_reg_1687 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_13_mid2_fu_999_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_13_mid2_reg_1692 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_17_mid2_v_v_v_fu_1046_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_17_mid2_v_v_v_reg_1697 : STD_LOGIC_VECTOR (7 downto 0);
    signal brmerge_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1369_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_12_reg_1710 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp1_fu_1135_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp1_reg_1715 : STD_LOGIC_VECTOR (47 downto 0);
    signal bias6_sum_fu_1140_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal bias6_sum_reg_1720 : STD_LOGIC_VECTOR (30 downto 0);
    signal gmem_addr_1_reg_1725 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_1171_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_1730 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_next8_fu_1182_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_next8_reg_1735 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_1740_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond2_reg_1740_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cin_fu_1194_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cin_reg_1744 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_addr_2_reg_1749 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_fu_1224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_557 : BOOLEAN;
    signal gmem_addr_3_reg_1760 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_3_read_reg_1766 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_fu_1262_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st38_fsm_28 : STD_LOGIC;
    signal ap_sig_586 : BOOLEAN;
    signal sum_4_fu_1324_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_4_reg_1787 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal indvar_flatten1_reg_271 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_op_assign_s_reg_282 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten7_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_1_reg_306 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_reg_318 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_reg_329 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_3_reg_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_4_reg_363 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_phi_fu_378_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_16_phi_fu_389_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out8_sum_cast_fu_1161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in2_sum9_cast_fu_1214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal W4_sum_cast_fu_1252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias6_sum_cast_fu_1267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal grp_fu_423_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tp_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_cast_fu_486_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_490_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg9_fu_504_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_510_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_520_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_526_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_1_cast_fu_544_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_fu_548_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_fu_562_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_568_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_554_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_578_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_584_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_x_V_fu_536_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_fu_594_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_618_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_cast_fu_626_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_fu_634_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_cast_fu_640_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_2_cast_fu_644_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_fu_648_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_662_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_662_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_6_fu_668_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_6_cast_fu_676_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_7_fu_684_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_7_cast_fu_690_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_5_cast_fu_694_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_8_fu_698_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_712_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_712_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_662_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_21_fu_730_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_712_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_26_fu_740_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_787_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_787_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_744_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound4_fu_797_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound4_fu_797_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound1_fu_807_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound1_fu_807_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_9_fu_1332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_10_fu_826_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_10_fu_826_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cout_fu_880_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_1338_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_10_mid_fu_873_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_913_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of i_fu_913_p2 : signal is "no";
    signal r_V_9_mid1_fu_1382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_mid1_fu_1363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_mid227_v_fu_901_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_mid2_v_fu_926_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_10_mid1_fu_937_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_10_mid1_fu_937_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_10_mid1_fu_937_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_10_mid_fu_907_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_18_fu_959_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_fu_963_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_7_cast_fu_968_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal slt_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_fu_1007_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_mid1_fu_1013_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_mid1_fu_1017_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_mid2_fu_1022_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_12_mid2_v_v_fu_1344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_12_mid2_fu_1041_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_12_mid2_fu_1041_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_17_mid2_v_v_fu_1058_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_17_mid2_v_v_fu_1058_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_17_mid2_v_v_fu_1058_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_7_cast_mid1_fu_1030_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal slt1_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_1086_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_fu_1090_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of w_V_fu_1090_p2 : signal is "no";
    signal tmp_28_fu_1095_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_1101_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_not_mid2_fu_1078_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_8_cast_fu_1119_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1355_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1135_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1135_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_cast_fu_1144_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_19_fu_1147_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_19_cast_cast_fu_1152_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal feature_out8_sum_fu_1156_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal indvar_flatten7_op_fu_1176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_11_cast_fu_1200_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_15_fu_1204_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of r_V_15_fu_1204_p2 : signal is "no";
    signal feature_in2_sum9_fu_1209_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp2_fu_1229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_cast_fu_1234_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_37_fu_1238_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_39_cast_cast_fu_1243_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal W4_sum_fu_1247_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal sum_5_to_int_fu_1277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1281_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_1291_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_1313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_5_fu_1319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_9_fu_1332_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_9_fu_1332_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_1338_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_12_mid2_v_v_fu_1344_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_17_mid2_fu_1350_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_17_mid2_fu_1350_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1355_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_17_mid2_fu_1350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_mid1_fu_1363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1369_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_1376_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1376_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_9_mid1_fu_1382_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_9_mid1_fu_1382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1388_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_662_ap_start : STD_LOGIC;
    signal grp_fu_712_ap_start : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);
    signal bound1_fu_807_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound1_fu_807_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound4_fu_797_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_797_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_787_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_787_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_662_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_712_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_10_fu_826_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_10_mid1_fu_937_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_17_mid2_fu_1350_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_17_mid2_v_v_fu_1058_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_9_fu_1332_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_9_mid1_fu_1382_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1135_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_659 : BOOLEAN;
    signal ap_sig_670 : BOOLEAN;

    component Conv_fadd_32ns_32ns_32_1_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fmul_32ns_32ns_32_1_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sdiv_19s_9ns_19_23_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component Conv_mul_mul_16ns_16ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mul_mul_8ns_16s_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_16ns_16s_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mac_muladd_8ns_16ns_32ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mul_mul_16s_8ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mac_muladd_16s_16ns_48ns_48_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mac_muladd_16ns_16ns_16ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mac_mul_sub_16s_8ns_8ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        CHout_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sy_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        relu_en_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        W : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Conv_AXILiteS_s_axi_U : component Conv_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        CHout_V => CHout_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        Sx_V => Sx_V,
        Sy_V => Sy_V,
        mode_V => mode_V,
        relu_en_V => relu_en_V,
        feature_in => feature_in,
        W => W,
        bias => bias,
        feature_out => feature_out);

    Conv_gmem_m_axi_U : component Conv_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_1725,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => sum_4_reg_1787,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Conv_fadd_32ns_32ns_32_1_full_dsp_U0 : component Conv_fadd_32ns_32ns_32_1_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_423_p0,
        din1 => grp_fu_423_p1,
        dout => grp_fu_423_p2);

    Conv_fmul_32ns_32ns_32_1_max_dsp_U1 : component Conv_fmul_32ns_32ns_32_1_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_440,
        din1 => gmem_addr_3_read_reg_1766,
        dout => tp_fu_429_p2);

    Conv_fcmp_32ns_32ns_1_1_U2 : component Conv_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_423_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_30_fu_434_p2);

    Conv_sdiv_19s_9ns_19_23_seq_U3 : component Conv_sdiv_19s_9ns_19_23_seq
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_662_ap_start,
        done => grp_fu_662_ap_done,
        din0 => grp_fu_662_p0,
        din1 => grp_fu_662_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_662_p2);

    Conv_sdiv_19s_9ns_19_23_seq_U4 : component Conv_sdiv_19s_9ns_19_23_seq
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_712_ap_start,
        done => grp_fu_712_ap_done,
        din0 => grp_fu_712_p0,
        din1 => grp_fu_712_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_712_p2);

    Conv_mul_mul_16ns_16ns_32_1_U5 : component Conv_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_9_fu_1332_p0,
        din1 => r_V_9_fu_1332_p1,
        dout => r_V_9_fu_1332_p2);

    Conv_mul_mul_8ns_16s_16_1_U6 : component Conv_mul_mul_8ns_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_34_fu_1338_p0,
        din1 => i_op_assign_1_reg_306,
        dout => tmp_34_fu_1338_p2);

    Conv_mul_mul_16ns_16s_32_1_U7 : component Conv_mul_mul_16ns_16s_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_12_mid2_v_v_fu_1344_p0,
        din1 => h_V_mid2_fu_1022_p3,
        dout => r_V_12_mid2_v_v_fu_1344_p2);

    Conv_mul_mul_16ns_16ns_32_1_U8 : component Conv_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_17_mid2_fu_1350_p0,
        din1 => r_V_17_mid2_fu_1350_p1,
        dout => r_V_17_mid2_fu_1350_p2);

    Conv_mac_muladd_8ns_16ns_32ns_32_1_U9 : component Conv_mac_muladd_8ns_16ns_32ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1355_p0,
        din1 => grp_fu_1355_p1,
        din2 => r_V_17_mid2_fu_1350_p2,
        dout => grp_fu_1355_p3);

    Conv_mul_mul_16s_8ns_16_1_U10 : component Conv_mul_mul_16s_8ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => i_fu_913_p2,
        din1 => tmp_20_mid1_fu_1363_p1,
        dout => tmp_20_mid1_fu_1363_p2);

    Conv_mac_muladd_16s_16ns_48ns_48_1_U11 : component Conv_mac_muladd_16s_16ns_48ns_48_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => w_V_fu_1090_p2,
        din1 => grp_fu_1369_p1,
        din2 => grp_fu_1369_p2,
        dout => grp_fu_1369_p3);

    Conv_mac_muladd_16ns_16ns_16ns_32_1_U12 : component Conv_mac_muladd_16ns_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1376_p0,
        din1 => grp_fu_1376_p1,
        din2 => grp_fu_1376_p2,
        dout => grp_fu_1376_p3);

    Conv_mul_mul_16ns_16ns_32_1_U13 : component Conv_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_9_mid1_fu_1382_p0,
        din1 => r_V_9_mid1_fu_1382_p1,
        dout => r_V_9_mid1_fu_1382_p2);

    Conv_mac_mul_sub_16s_8ns_8ns_16_1_U14 : component Conv_mac_mul_sub_16s_8ns_8ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1388_p0,
        din1 => grp_fu_1388_p1,
        din2 => grp_fu_1388_p2,
        dout => grp_fu_1388_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_29) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345)))))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_1 = gmem_ARREADY) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and (ap_const_logic_1 = gmem_ARREADY) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_29) and (ap_const_logic_1 = gmem_ARREADY)))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_37)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_38)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))) and not((exitcond2_reg_1740 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = brmerge_fu_1109_p2) and not((ap_const_lv1_0 = tmp_33_fu_1123_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = brmerge_fu_1109_p2) and not((ap_const_lv1_0 = tmp_33_fu_1123_p2)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = brmerge_fu_1109_p2) and not((ap_const_lv1_0 = tmp_33_fu_1123_p2)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = brmerge_fu_1109_p2) and not((ap_const_lv1_0 = tmp_33_fu_1123_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_43) and not((gmem_BVALID = ap_const_logic_0)))) then 
                i_op_assign_1_reg_306 <= i_op_assign_10_mid2_reg_1673;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not(((ap_const_logic_0 = grp_fu_662_ap_done) or (ap_const_logic_0 = grp_fu_712_ap_done))))) then 
                i_op_assign_1_reg_306 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_43) and not((gmem_BVALID = ap_const_logic_0)))) then 
                i_op_assign_2_reg_318 <= j_reg_1730;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not(((ap_const_logic_0 = grp_fu_662_ap_done) or (ap_const_logic_0 = grp_fu_712_ap_done))))) then 
                i_op_assign_2_reg_318 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_28)) then 
                i_op_assign_3_reg_340 <= r_V_17_mid2_v_v_v_reg_1697;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
                i_op_assign_3_reg_340 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_4_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_28)) then 
                i_op_assign_4_reg_363 <= jj_fu_1262_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
                i_op_assign_4_reg_363 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = brmerge_fu_1109_p2) and not((ap_const_lv1_0 = tmp_33_fu_1123_p2)))) then 
                i_op_assign_reg_374 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345))))) then 
                i_op_assign_reg_374 <= cin_reg_1744;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_43) and not((gmem_BVALID = ap_const_logic_0)))) then 
                i_op_assign_s_reg_282 <= tmp_10_mid2_v_reg_1646;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not(((ap_const_logic_0 = grp_fu_662_ap_done) or (ap_const_logic_0 = grp_fu_712_ap_done))))) then 
                i_op_assign_s_reg_282 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_43) and not((gmem_BVALID = ap_const_logic_0)))) then 
                indvar_flatten1_reg_271 <= indvar_flatten_next1_reg_1614;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not(((ap_const_logic_0 = grp_fu_662_ap_done) or (ap_const_logic_0 = grp_fu_712_ap_done))))) then 
                indvar_flatten1_reg_271 <= ap_const_lv48_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_43) and not((gmem_BVALID = ap_const_logic_0)))) then 
                indvar_flatten7_reg_294 <= indvar_flatten_next8_reg_1735;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not(((ap_const_logic_0 = grp_fu_662_ap_done) or (ap_const_logic_0 = grp_fu_712_ap_done))))) then 
                indvar_flatten7_reg_294 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_28)) then 
                indvar_flatten_reg_329 <= indvar_flatten_next_reg_1687;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
                indvar_flatten_reg_329 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    r_V_16_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = brmerge_fu_1109_p2) and not((ap_const_lv1_0 = tmp_33_fu_1123_p2)))) then 
                r_V_16_reg_385 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter1))) then 
                r_V_16_reg_385 <= next_mul_reg_1755;
            end if; 
        end if;
    end process;

    sum_1_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_28)) then 
                sum_1_reg_351 <= sum_3_reg_407;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
                sum_1_reg_351 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_2_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = brmerge_fu_1109_p2) and not((ap_const_lv1_0 = tmp_33_fu_1123_p2)))) then 
                sum_2_reg_396 <= sum_1_reg_351;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345))))) then 
                sum_2_reg_396 <= grp_fu_423_p2;
            end if; 
        end if;
    end process;

    sum_3_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))) and not((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4)))) then 
                sum_3_reg_407 <= sum_2_reg_396;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and not((ap_const_lv1_0 = brmerge_fu_1109_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = brmerge_fu_1109_p2) and (ap_const_lv1_0 = tmp_33_fu_1123_p2)))) then 
                sum_3_reg_407 <= sum_1_reg_351;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                CHin_V_read_reg_1431 <= CHin_V;
                CHout_V_read_reg_1420 <= CHout_V;
                Kx_V_read_reg_1414 <= Kx_V;
                Ky_V_read_reg_1409 <= Ky_V;
                Sx_V_read_reg_1404 <= Sx_V;
                Sy_V_read_reg_1399 <= Sy_V;
                Win_V_read_reg_1426 <= Win_V;
                    lhs_V_2_cast_reg_1468(15 downto 0) <= lhs_V_2_cast_fu_630_p1(15 downto 0);
                    lhs_V_4_cast_reg_1483(15 downto 0) <= lhs_V_4_cast_fu_680_p1(15 downto 0);
                p_1_reg_1463 <= p_1_fu_610_p3;
                p_s_reg_1458 <= p_s_fu_602_p3;
                relu_en_V_read_reg_1394 <= relu_en_V;
                tmp_10_reg_1448 <= W(31 downto 2);
                tmp_16_reg_1453 <= feature_in(31 downto 2);
                tmp_1_reg_1438 <= feature_out(31 downto 2);
                tmp_5_reg_1443 <= bias(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not(((ap_const_logic_0 = grp_fu_662_ap_done) or (ap_const_logic_0 = grp_fu_712_ap_done))))) then
                Wout_V_reg_1519 <= Wout_V_fu_734_p2;
                bound1_reg_1596 <= bound1_fu_807_p2;
                bound4_reg_1591 <= bound4_fu_797_p2;
                bound_reg_1586 <= bound_fu_787_p2;
                exitcond_mid_reg_1601 <= exitcond_mid_fu_813_p2;
                    rhs_V_12_cast_reg_1568(15 downto 0) <= rhs_V_12_cast_fu_775_p1(15 downto 0);
                    rhs_V_13_cast_reg_1575(15 downto 0) <= rhs_V_13_cast_fu_778_p1(15 downto 0);
                    rhs_V_14_cast_reg_1580(15 downto 0) <= rhs_V_14_cast_fu_781_p1(15 downto 0);
                    rhs_V_16_cast_reg_1563(7 downto 0) <= rhs_V_16_cast_fu_772_p1(7 downto 0);
                    rhs_V_1_reg_1540(15 downto 0) <= rhs_V_1_fu_760_p1(15 downto 0);
                    rhs_V_2_reg_1558(15 downto 0) <= rhs_V_2_fu_769_p1(15 downto 0);
                    rhs_V_4_cast_reg_1534(15 downto 0) <= rhs_V_4_cast_fu_756_p1(15 downto 0);
                    tmp_10_cast_reg_1499(29 downto 0) <= tmp_10_cast_fu_718_p1(29 downto 0);
                    tmp_14_reg_1547(7 downto 0) <= tmp_14_fu_763_p1(7 downto 0);
                    tmp_15_reg_1553(7 downto 0) <= tmp_15_fu_766_p1(7 downto 0);
                    tmp_16_cast_reg_1504(29 downto 0) <= tmp_16_cast_fu_721_p1(29 downto 0);
                    tmp_17_cast_reg_1509(29 downto 0) <= tmp_17_cast_fu_724_p1(29 downto 0);
                    tmp_21_cast_reg_1514(29 downto 0) <= tmp_21_cast_fu_727_p1(29 downto 0);
                    tmp_9_reg_1524(7 downto 0) <= tmp_9_fu_750_p1(7 downto 0);
                    tmp_s_reg_1529(7 downto 0) <= tmp_s_fu_753_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345))))) then
                ap_reg_ppstg_exitcond2_reg_1740_pp0_iter1 <= exitcond2_reg_1740;
                ap_reg_ppstg_exitcond2_reg_1740_pp0_iter2 <= ap_reg_ppstg_exitcond2_reg_1740_pp0_iter1;
                ap_reg_ppstg_exitcond2_reg_1740_pp0_iter3 <= ap_reg_ppstg_exitcond2_reg_1740_pp0_iter2;
                ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4 <= ap_reg_ppstg_exitcond2_reg_1740_pp0_iter3;
                exitcond2_reg_1740 <= exitcond2_fu_1189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_lv1_0 = exitcond_flatten_fu_983_p2)))) then
                bias6_sum_reg_1720 <= bias6_sum_fu_1140_p2;
                gmem_addr_1_reg_1725 <= feature_out8_sum_cast_fu_1161_p1(32 - 1 downto 0);
                indvar_flatten_next8_reg_1735 <= indvar_flatten_next8_fu_1182_p3;
                j_reg_1730 <= j_fu_1171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345))))) then
                cin_reg_1744 <= cin_fu_1194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (ap_const_lv1_0 = exitcond_flatten1_fu_831_p2))) then
                exitcond_flatten2_reg_1619 <= exitcond_flatten2_fu_842_p2;
                exitcond_mid1_reg_1628 <= exitcond_mid1_fu_852_p3;
                i_op_assign_12_mid2_reg_1635 <= i_op_assign_12_mid2_fu_865_p3;
                tmp_24_reg_1641 <= grp_fu_1388_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345))) and (ap_const_lv1_0 = exitcond2_fu_1189_p2))) then
                gmem_addr_2_reg_1749 <= feature_in2_sum9_cast_fu_1214_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))))) then
                gmem_addr_3_read_reg_1766 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (exitcond2_reg_1740 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))))) then
                gmem_addr_3_reg_1760 <= W4_sum_cast_fu_1252_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                i_op_assign_10_mid2_reg_1673 <= i_op_assign_10_mid2_fu_949_p3;
                    i_op_assign_12_cast7_reg_1678(15 downto 0) <= i_op_assign_12_cast7_fu_956_p1(15 downto 0);
                r_V_10_mid2_reg_1668 <= r_V_10_mid2_fu_942_p3;
                    tmp_10_cast_mid2_reg_1656(15 downto 0) <= tmp_10_cast_mid2_fu_897_p1(15 downto 0);
                    tmp_10_mid2_cast_reg_1651(15 downto 0) <= tmp_10_mid2_cast_fu_893_p1(15 downto 0);
                tmp_10_mid2_v_reg_1646 <= tmp_10_mid2_v_fu_886_p3;
                tmp_21_mid2_reg_1662 <= tmp_21_mid2_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2))) then
                i_op_assign_13_mid2_reg_1692 <= i_op_assign_13_mid2_fu_999_p3;
                r_V_17_mid2_v_v_v_reg_1697 <= r_V_17_mid2_v_v_v_fu_1046_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then
                indvar_flatten_next1_reg_1614 <= indvar_flatten_next1_fu_836_p2;
                r_V_10_reg_1606 <= r_V_10_fu_826_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                indvar_flatten_next_reg_1687 <= indvar_flatten_next_fu_988_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))))) then
                next_mul_reg_1755 <= next_mul_fu_1224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = brmerge_fu_1109_p2) and not((ap_const_lv1_0 = tmp_33_fu_1123_p2)))) then
                r_V_12_reg_1710 <= grp_fu_1369_p3;
                tmp1_reg_1715 <= tmp1_fu_1135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter3) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_36) and not((gmem_RVALID = ap_const_logic_0))))) then
                reg_440 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_37) and not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY)))) then
                sum_4_reg_1787 <= sum_4_fu_1324_p3;
            end if;
        end if;
    end process;
    lhs_V_2_cast_reg_1468(16) <= '0';
    lhs_V_4_cast_reg_1483(16) <= '0';
    tmp_10_cast_reg_1499(48 downto 30) <= "0000000000000000000";
    tmp_16_cast_reg_1504(30) <= '0';
    tmp_17_cast_reg_1509(48 downto 30) <= "0000000000000000000";
    tmp_21_cast_reg_1514(47 downto 30) <= "000000000000000000";
    tmp_9_reg_1524(15 downto 8) <= "00000000";
    tmp_s_reg_1529(15 downto 8) <= "00000000";
    rhs_V_4_cast_reg_1534(31 downto 16) <= "0000000000000000";
    rhs_V_1_reg_1540(31 downto 16) <= "0000000000000000";
    tmp_14_reg_1547(15 downto 8) <= "00000000";
    tmp_15_reg_1553(15 downto 8) <= "00000000";
    rhs_V_2_reg_1558(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_16_cast_reg_1563(15 downto 8) <= "00000000";
    rhs_V_12_cast_reg_1568(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_13_cast_reg_1575(23 downto 16) <= "00000000";
    rhs_V_14_cast_reg_1580(31 downto 16) <= "0000000000000000";
    tmp_10_mid2_cast_reg_1651(30 downto 16) <= "000000000000000";
    tmp_10_cast_mid2_reg_1656(31 downto 16) <= "0000000000000000";
    i_op_assign_12_cast7_reg_1678(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_sig_cseq_ST_pp0_stg1_fsm_27, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, exitcond2_reg_1740, gmem_RVALID, gmem_BVALID, ap_sig_ioackin_gmem_ARREADY, ap_sig_345, grp_fu_662_ap_done, grp_fu_712_ap_done, exitcond_flatten1_fu_831_p2, exitcond_flatten_fu_983_p2, brmerge_fu_1109_p2, tmp_33_fu_1123_p2, ap_sig_557, ap_sig_ioackin_gmem_AWREADY, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                if (not(((ap_const_logic_0 = grp_fu_662_ap_done) or (ap_const_logic_0 = grp_fu_712_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st24_fsm_23 => 
                if (not((ap_const_lv1_0 = exitcond_flatten1_fu_831_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                end if;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                if (((ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = brmerge_fu_1109_p2) and not((ap_const_lv1_0 = tmp_33_fu_1123_p2)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_26;
                elsif ((((ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and not((ap_const_lv1_0 = brmerge_fu_1109_p2))) or ((ap_const_lv1_0 = exitcond_flatten_fu_983_p2) and (ap_const_lv1_0 = tmp_33_fu_1123_p2)))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_29;
                end if;
            when ap_ST_pp0_stg0_fsm_26 => 
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_26;
                end if;
            when ap_ST_pp0_stg1_fsm_27 => 
                if ((not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))) and not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_26;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) then
                    ap_NS_fsm <= ap_ST_st38_fsm_28;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_27;
                end if;
            when ap_ST_st38_fsm_28 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st39_fsm_29 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st40_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_29;
                end if;
            when ap_ST_st40_fsm_30 => 
                ap_NS_fsm <= ap_ST_st41_fsm_31;
            when ap_ST_st41_fsm_31 => 
                ap_NS_fsm <= ap_ST_st42_fsm_32;
            when ap_ST_st42_fsm_32 => 
                ap_NS_fsm <= ap_ST_st43_fsm_33;
            when ap_ST_st43_fsm_33 => 
                ap_NS_fsm <= ap_ST_st44_fsm_34;
            when ap_ST_st44_fsm_34 => 
                ap_NS_fsm <= ap_ST_st45_fsm_35;
            when ap_ST_st45_fsm_35 => 
                ap_NS_fsm <= ap_ST_st46_fsm_36;
            when ap_ST_st46_fsm_36 => 
                if (not((gmem_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st47_fsm_37;
                else
                    ap_NS_fsm <= ap_ST_st46_fsm_36;
                end if;
            when ap_ST_st47_fsm_37 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st48_fsm_38;
                else
                    ap_NS_fsm <= ap_ST_st47_fsm_37;
                end if;
            when ap_ST_st48_fsm_38 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_st49_fsm_39;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_38;
                end if;
            when ap_ST_st49_fsm_39 => 
                ap_NS_fsm <= ap_ST_st50_fsm_40;
            when ap_ST_st50_fsm_40 => 
                ap_NS_fsm <= ap_ST_st51_fsm_41;
            when ap_ST_st51_fsm_41 => 
                ap_NS_fsm <= ap_ST_st52_fsm_42;
            when ap_ST_st52_fsm_42 => 
                ap_NS_fsm <= ap_ST_st53_fsm_43;
            when ap_ST_st53_fsm_43 => 
                if (not((gmem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st53_fsm_43;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    W4_sum_cast_fu_1252_p1 <= std_logic_vector(resize(unsigned(W4_sum_fu_1247_p2),64));
    W4_sum_fu_1247_p2 <= std_logic_vector(unsigned(tmp_39_cast_cast_fu_1243_p1) + unsigned(tmp_17_cast_reg_1509));
    Wout_V_fu_734_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_21_fu_730_p1));

    ap_done_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, exitcond_flatten1_fu_831_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not((ap_const_lv1_0 = exitcond_flatten1_fu_831_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, exitcond_flatten1_fu_831_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and not((ap_const_lv1_0 = exitcond_flatten1_fu_831_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_139_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_139 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    ap_sig_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_162 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_183 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    ap_sig_191_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_191 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    ap_sig_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_200 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    ap_sig_208_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_208 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    ap_sig_216_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_216 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    ap_sig_345_assign_proc : process(ap_reg_ppstg_exitcond2_reg_1740_pp0_iter3, gmem_RVALID)
    begin
                ap_sig_345 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter3) and (gmem_RVALID = ap_const_logic_0));
    end process;


    ap_sig_404_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_404 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_458_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_458 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_480_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_480 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_501_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_501 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_557_assign_proc : process(ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4, gmem_RVALID)
    begin
                ap_sig_557 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4) and (gmem_RVALID = ap_const_logic_0));
    end process;


    ap_sig_586_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_586 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    ap_sig_61_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_61 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_659_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_27, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it4, exitcond2_reg_1740, ap_sig_557)
    begin
                ap_sig_659 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557)));
    end process;


    ap_sig_670_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it4, exitcond2_reg_1740, ap_sig_cseq_ST_pp0_stg0_fsm_26, ap_sig_345)
    begin
                ap_sig_670 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345)));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_26_assign_proc : process(ap_sig_162)
    begin
        if (ap_sig_162) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg1_fsm_27_assign_proc : process(ap_sig_139)
    begin
        if (ap_sig_139) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_61)
    begin
        if (ap_sig_61) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_404)
    begin
        if (ap_sig_404) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_458)
    begin
        if (ap_sig_458) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_480)
    begin
        if (ap_sig_480) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_501)
    begin
        if (ap_sig_501) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st38_fsm_28_assign_proc : process(ap_sig_586)
    begin
        if (ap_sig_586) then 
            ap_sig_cseq_ST_st38_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st39_fsm_29_assign_proc : process(ap_sig_183)
    begin
        if (ap_sig_183) then 
            ap_sig_cseq_ST_st39_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st46_fsm_36_assign_proc : process(ap_sig_191)
    begin
        if (ap_sig_191) then 
            ap_sig_cseq_ST_st46_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st46_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st47_fsm_37_assign_proc : process(ap_sig_200)
    begin
        if (ap_sig_200) then 
            ap_sig_cseq_ST_st47_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st47_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st48_fsm_38_assign_proc : process(ap_sig_208)
    begin
        if (ap_sig_208) then 
            ap_sig_cseq_ST_st48_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st53_fsm_43_assign_proc : process(ap_sig_216)
    begin
        if (ap_sig_216) then 
            ap_sig_cseq_ST_st53_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st53_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bias6_sum_cast_fu_1267_p1 <= std_logic_vector(resize(unsigned(bias6_sum_reg_1720),64));
    bias6_sum_fu_1140_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_1504) + unsigned(tmp_10_mid2_cast_reg_1651));
    bound1_fu_807_p0 <= bound1_fu_807_p00(16 - 1 downto 0);
    bound1_fu_807_p00 <= std_logic_vector(resize(unsigned(CHout_V_read_reg_1420),48));
    bound1_fu_807_p1 <= bound1_fu_807_p10(32 - 1 downto 0);
    bound1_fu_807_p10 <= std_logic_vector(resize(unsigned(bound4_fu_797_p2),48));
    bound1_fu_807_p2 <= std_logic_vector(resize(unsigned(bound1_fu_807_p0) * unsigned(bound1_fu_807_p1), 48));
    bound4_fu_797_p0 <= bound4_fu_797_p00(16 - 1 downto 0);
    bound4_fu_797_p00 <= std_logic_vector(resize(unsigned(tmp_7_fu_744_p2),32));
    bound4_fu_797_p1 <= bound4_fu_797_p10(16 - 1 downto 0);
    bound4_fu_797_p10 <= std_logic_vector(resize(unsigned(Wout_V_fu_734_p2),32));
    bound4_fu_797_p2 <= std_logic_vector(resize(unsigned(bound4_fu_797_p0) * unsigned(bound4_fu_797_p1), 32));
    bound_fu_787_p0 <= bound_fu_787_p00(8 - 1 downto 0);
    bound_fu_787_p00 <= std_logic_vector(resize(unsigned(Ky_V_read_reg_1409),16));
    bound_fu_787_p1 <= bound_fu_787_p10(8 - 1 downto 0);
    bound_fu_787_p10 <= std_logic_vector(resize(unsigned(Kx_V_read_reg_1414),16));
    bound_fu_787_p2 <= std_logic_vector(resize(unsigned(bound_fu_787_p0) * unsigned(bound_fu_787_p1), 16));
    brmerge_fu_1109_p2 <= (tmp_38_fu_1101_p3 or tmp_31_not_mid2_fu_1078_p3);
    cin_fu_1194_p2 <= std_logic_vector(unsigned(i_op_assign_phi_fu_378_p4) + unsigned(ap_const_lv16_1));
    cout_fu_880_p2 <= std_logic_vector(unsigned(i_op_assign_s_reg_282) + unsigned(ap_const_lv16_1));
    exitcond1_fu_994_p2 <= "1" when (i_op_assign_4_reg_363 = Kx_V_read_reg_1414) else "0";
    exitcond2_fu_1189_p2 <= "1" when (i_op_assign_phi_fu_378_p4 = CHin_V_read_reg_1431) else "0";
    exitcond_flatten1_fu_831_p2 <= "1" when (indvar_flatten1_reg_271 = bound1_reg_1596) else "0";
    exitcond_flatten2_fu_842_p2 <= "1" when (indvar_flatten7_reg_294 = bound4_reg_1591) else "0";
    exitcond_flatten_fu_983_p2 <= "1" when (indvar_flatten_reg_329 = bound_reg_1586) else "0";
    exitcond_fu_847_p2 <= "1" when (i_op_assign_2_reg_318 = Wout_V_reg_1519) else "0";
    exitcond_mid1_fu_852_p3 <= 
        exitcond_mid_reg_1601 when (exitcond_flatten2_fu_842_p2(0) = '1') else 
        exitcond_fu_847_p2;
    exitcond_mid_fu_813_p2 <= "1" when (Wout_V_fu_734_p2 = ap_const_lv16_0) else "0";
        feature_in2_sum9_cast_fu_1214_p1 <= std_logic_vector(resize(signed(feature_in2_sum9_fu_1209_p2),64));

    feature_in2_sum9_fu_1209_p2 <= std_logic_vector(unsigned(r_V_15_fu_1204_p2) + unsigned(tmp_21_cast_reg_1514));
    feature_out8_sum_cast_fu_1161_p1 <= std_logic_vector(resize(unsigned(feature_out8_sum_fu_1156_p2),64));
    feature_out8_sum_fu_1156_p2 <= std_logic_vector(unsigned(tmp_10_cast_reg_1499) + unsigned(tmp_19_cast_cast_fu_1152_p1));

    gmem_ARADDR_assign_proc : process(ap_sig_cseq_ST_st39_fsm_29, gmem_addr_2_reg_1749, gmem_addr_3_reg_1760, bias6_sum_cast_fu_1267_p1, ap_reg_ioackin_gmem_ARREADY, ap_sig_659, ap_sig_670)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_29)) then 
                gmem_ARADDR <= bias6_sum_cast_fu_1267_p1(32 - 1 downto 0);
            elsif (ap_sig_670) then 
                gmem_ARADDR <= gmem_addr_3_reg_1760;
            elsif (ap_sig_659) then 
                gmem_ARADDR <= gmem_addr_2_reg_1749;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_27, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it4, exitcond2_reg_1740, ap_sig_cseq_ST_pp0_stg0_fsm_26, ap_sig_cseq_ST_st39_fsm_29, ap_sig_345, ap_sig_557, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_29) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_sig_cseq_ST_st47_fsm_37, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_37) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_sig_cseq_ST_st53_fsm_43, gmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_43) and not((gmem_BVALID = ap_const_logic_0)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_27, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it4, exitcond2_reg_1740, ap_sig_cseq_ST_pp0_stg0_fsm_26, ap_reg_ppstg_exitcond2_reg_1740_pp0_iter3, ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4, ap_sig_cseq_ST_st46_fsm_36, gmem_RVALID, ap_sig_ioackin_gmem_ARREADY, ap_sig_345, ap_sig_557)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter3) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_345)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_36) and not((gmem_RVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and ap_sig_557)))))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_sig_cseq_ST_st48_fsm_38, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_38) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_sig_cseq_ST_pp0_stg1_fsm_27, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, exitcond2_reg_1740, ap_sig_cseq_ST_pp0_stg0_fsm_26, ap_sig_cseq_ST_st39_fsm_29)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_1740 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26)) or (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_29))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_sig_cseq_ST_st47_fsm_37)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_37)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_sig_cseq_ST_st53_fsm_43)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st53_fsm_43)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_sig_cseq_ST_pp0_stg1_fsm_27, ap_reg_ppiten_pp0_it4, ap_sig_cseq_ST_pp0_stg0_fsm_26, ap_reg_ppstg_exitcond2_reg_1740_pp0_iter3, ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4, ap_sig_cseq_ST_st46_fsm_36)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter4)) or (ap_const_logic_1 = ap_sig_cseq_ST_st46_fsm_36))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_sig_cseq_ST_st48_fsm_38)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_38)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1355_p0 <= grp_fu_1355_p00(8 - 1 downto 0);
    grp_fu_1355_p00 <= std_logic_vector(resize(unsigned(i_op_assign_13_mid2_fu_999_p3),24));
    grp_fu_1355_p1 <= rhs_V_13_cast_reg_1575(16 - 1 downto 0);
    grp_fu_1369_p1 <= rhs_V_1_reg_1540(16 - 1 downto 0);
    grp_fu_1369_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &r_V_12_mid2_fu_1041_p0) * signed(r_V_12_mid2_fu_1041_p1))), 48));
    grp_fu_1376_p0 <= rhs_V_14_cast_reg_1580(16 - 1 downto 0);
    grp_fu_1376_p1 <= i_op_assign_12_cast7_reg_1678(16 - 1 downto 0);
    grp_fu_1376_p2 <= tmp_10_cast_mid2_reg_1656(16 - 1 downto 0);
    grp_fu_1388_p0 <= 
        ap_const_lv16_0 when (tmp_31_fu_859_p2(0) = '1') else 
        i_op_assign_2_reg_318;
    grp_fu_1388_p1 <= tmp_15_reg_1553(8 - 1 downto 0);
    grp_fu_1388_p2 <= tmp_s_reg_1529(8 - 1 downto 0);

    grp_fu_423_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_26, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_st47_fsm_37, sum_2_reg_396, sum_1_reg_351)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_37)) then 
            grp_fu_423_p0 <= sum_1_reg_351;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            grp_fu_423_p0 <= sum_2_reg_396;
        else 
            grp_fu_423_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_423_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_26, ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_st47_fsm_37, reg_440, tp_fu_429_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st47_fsm_37)) then 
            grp_fu_423_p1 <= reg_440;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            grp_fu_423_p1 <= tp_fu_429_p2;
        else 
            grp_fu_423_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_662_ap_start_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            grp_fu_662_ap_start <= ap_const_logic_1;
        else 
            grp_fu_662_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_662_p0 <= std_logic_vector(resize(signed(r_V_4_fu_648_p2),19));

    grp_fu_662_p1 <= grp_fu_662_p10(9 - 1 downto 0);
    grp_fu_662_p10 <= std_logic_vector(resize(unsigned(Sx_V),19));

    grp_fu_712_ap_start_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            grp_fu_712_ap_start <= ap_const_logic_1;
        else 
            grp_fu_712_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_712_p0 <= std_logic_vector(resize(signed(r_V_8_fu_698_p2),19));

    grp_fu_712_p1 <= grp_fu_712_p10(9 - 1 downto 0);
    grp_fu_712_p10 <= std_logic_vector(resize(unsigned(Sy_V),19));
    h_V_fu_963_p2 <= std_logic_vector(unsigned(tmp_18_fu_959_p1) + unsigned(tmp_21_mid2_reg_1662));
    h_V_mid1_fu_1017_p2 <= std_logic_vector(unsigned(tmp_18_mid1_fu_1013_p1) + unsigned(tmp_21_mid2_reg_1662));
    h_V_mid2_fu_1022_p3 <= 
        h_V_mid1_fu_1017_p2 when (exitcond1_fu_994_p2(0) = '1') else 
        h_V_fu_963_p2;
    i_fu_913_p2 <= std_logic_vector(unsigned(i_op_assign_10_mid_fu_873_p3) + unsigned(ap_const_lv16_1));
    i_op_assign_10_mid2_fu_949_p3 <= 
        i_fu_913_p2 when (exitcond_mid1_reg_1628(0) = '1') else 
        i_op_assign_10_mid_fu_873_p3;
    i_op_assign_10_mid_fu_873_p3 <= 
        ap_const_lv16_0 when (exitcond_flatten2_reg_1619(0) = '1') else 
        i_op_assign_1_reg_306;
    i_op_assign_12_cast7_fu_956_p1 <= std_logic_vector(resize(unsigned(i_op_assign_12_mid2_reg_1635),32));
    i_op_assign_12_mid2_fu_865_p3 <= 
        ap_const_lv16_0 when (tmp_31_fu_859_p2(0) = '1') else 
        i_op_assign_2_reg_318;
    i_op_assign_13_mid2_fu_999_p3 <= 
        ap_const_lv8_0 when (exitcond1_fu_994_p2(0) = '1') else 
        i_op_assign_4_reg_363;

    i_op_assign_phi_fu_378_p4_assign_proc : process(ap_reg_ppiten_pp0_it1, exitcond2_reg_1740, ap_sig_cseq_ST_pp0_stg0_fsm_26, i_op_assign_reg_374, cin_reg_1744)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_1740 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_26))) then 
            i_op_assign_phi_fu_378_p4 <= cin_reg_1744;
        else 
            i_op_assign_phi_fu_378_p4 <= i_op_assign_reg_374;
        end if; 
    end process;

    ii_fu_1007_p2 <= std_logic_vector(unsigned(i_op_assign_3_reg_340) + unsigned(ap_const_lv8_1));
    indvar_flatten7_op_fu_1176_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(indvar_flatten7_reg_294));
    indvar_flatten_next1_fu_836_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_271) + unsigned(ap_const_lv48_1));
    indvar_flatten_next8_fu_1182_p3 <= 
        ap_const_lv32_1 when (exitcond_flatten2_reg_1619(0) = '1') else 
        indvar_flatten7_op_fu_1176_p2;
    indvar_flatten_next_fu_988_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_329) + unsigned(ap_const_lv16_1));
    j_fu_1171_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(i_op_assign_12_mid2_reg_1635));
    jj_fu_1262_p2 <= std_logic_vector(unsigned(i_op_assign_13_mid2_reg_1692) + unsigned(ap_const_lv8_1));
    lhs_V_1_cast_fu_544_p1 <= std_logic_vector(resize(unsigned(Ky_V),9));
    lhs_V_2_cast_fu_630_p1 <= std_logic_vector(resize(unsigned(Win_V),17));
    lhs_V_4_cast_fu_680_p1 <= std_logic_vector(resize(unsigned(Hin_V),17));
        lhs_V_7_cast_fu_968_p1 <= std_logic_vector(resize(signed(h_V_fu_963_p2),17));

        lhs_V_7_cast_mid1_fu_1030_p1 <= std_logic_vector(resize(signed(h_V_mid1_fu_1017_p2),17));

        lhs_V_8_cast_fu_1119_p1 <= std_logic_vector(resize(signed(w_V_fu_1090_p2),17));

    lhs_V_cast_fu_486_p1 <= std_logic_vector(resize(unsigned(Kx_V),9));
    next_mul_fu_1224_p2 <= std_logic_vector(unsigned(rhs_V_14_cast_reg_1580) + unsigned(r_V_16_phi_fu_389_p4));
    notlhs_fu_1295_p2 <= "0" when (tmp_25_fu_1281_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_1301_p2 <= "1" when (tmp_35_fu_1291_p1 = ap_const_lv23_0) else "0";
    p_1_fu_610_p3 <= 
        pad_y_V_fu_594_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    p_neg9_fu_504_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(lhs_V_cast_fu_486_p1));
    p_neg_fu_562_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(lhs_V_1_cast_fu_544_p1));
    p_s_fu_602_p3 <= 
        pad_x_V_fu_536_p3 when (mode_V(0) = '1') else 
        ap_const_lv8_0;
    pad_x_V_fu_536_p3 <= 
        tmp_3_fu_520_p2 when (tmp_17_fu_496_p3(0) = '1') else 
        tmp_6_fu_526_p4;
    pad_y_V_fu_594_p3 <= 
        tmp_8_fu_578_p2 when (tmp_20_fu_554_p3(0) = '1') else 
        tmp_11_fu_584_p4;
    r_V_10_fu_826_p0 <= r_V_10_fu_826_p00(32 - 1 downto 0);
    r_V_10_fu_826_p00 <= std_logic_vector(resize(unsigned(r_V_9_fu_1332_p2),48));
    r_V_10_fu_826_p1 <= rhs_V_12_cast_reg_1568(16 - 1 downto 0);
    r_V_10_fu_826_p2 <= std_logic_vector(resize(unsigned(r_V_10_fu_826_p0) * unsigned(r_V_10_fu_826_p1), 48));
    r_V_10_mid1_fu_937_p0 <= r_V_10_mid1_fu_937_p00(32 - 1 downto 0);
    r_V_10_mid1_fu_937_p00 <= std_logic_vector(resize(unsigned(r_V_9_mid1_fu_1382_p2),48));
    r_V_10_mid1_fu_937_p1 <= rhs_V_12_cast_reg_1568(16 - 1 downto 0);
    r_V_10_mid1_fu_937_p2 <= std_logic_vector(resize(unsigned(r_V_10_mid1_fu_937_p0) * unsigned(r_V_10_mid1_fu_937_p1), 48));
    r_V_10_mid2_fu_942_p3 <= 
        r_V_10_mid1_fu_937_p2 when (exitcond_mid1_reg_1628(0) = '1') else 
        r_V_10_mid_fu_907_p3;
    r_V_10_mid_fu_907_p3 <= 
        ap_const_lv48_0 when (exitcond_flatten2_reg_1619(0) = '1') else 
        r_V_10_reg_1606;
    r_V_12_mid2_fu_1041_p0 <= rhs_V_2_reg_1558(16 - 1 downto 0);
    r_V_12_mid2_fu_1041_p1 <= r_V_12_mid2_v_v_fu_1344_p2;
    r_V_12_mid2_v_v_fu_1344_p0 <= rhs_V_1_reg_1540(16 - 1 downto 0);
    r_V_15_fu_1204_p2 <= std_logic_vector(unsigned(rhs_V_11_cast_fu_1200_p1) + unsigned(r_V_12_reg_1710));

    r_V_16_phi_fu_389_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_27, ap_reg_ppiten_pp0_it1, r_V_16_reg_385, ap_reg_ppstg_exitcond2_reg_1740_pp0_iter1, next_mul_reg_1755)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_27) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_1740_pp0_iter1))) then 
            r_V_16_phi_fu_389_p4 <= next_mul_reg_1755;
        else 
            r_V_16_phi_fu_389_p4 <= r_V_16_reg_385;
        end if; 
    end process;

    r_V_17_mid2_fu_1350_p0 <= rhs_V_1_reg_1540(16 - 1 downto 0);
    r_V_17_mid2_fu_1350_p1 <= r_V_17_mid2_fu_1350_p10(16 - 1 downto 0);
    r_V_17_mid2_fu_1350_p10 <= std_logic_vector(resize(unsigned(r_V_17_mid2_v_v_fu_1058_p2),32));
    r_V_17_mid2_v_v_fu_1058_p0 <= rhs_V_16_cast_reg_1563(8 - 1 downto 0);
    r_V_17_mid2_v_v_fu_1058_p1 <= r_V_17_mid2_v_v_fu_1058_p10(8 - 1 downto 0);
    r_V_17_mid2_v_v_fu_1058_p10 <= std_logic_vector(resize(unsigned(r_V_17_mid2_v_v_v_fu_1046_p3),16));
    r_V_17_mid2_v_v_fu_1058_p2 <= std_logic_vector(resize(unsigned(r_V_17_mid2_v_v_fu_1058_p0) * unsigned(r_V_17_mid2_v_v_fu_1058_p1), 16));
    r_V_17_mid2_v_v_v_fu_1046_p3 <= 
        ii_fu_1007_p2 when (exitcond1_fu_994_p2(0) = '1') else 
        i_op_assign_3_reg_340;
    r_V_1_fu_548_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(lhs_V_1_cast_fu_544_p1));
    r_V_2_cast_fu_626_p1 <= std_logic_vector(resize(unsigned(r_V_2_fu_618_p3),17));
    r_V_2_fu_618_p3 <= (p_s_fu_602_p3 & ap_const_lv1_0);
    r_V_3_cast_fu_640_p1 <= std_logic_vector(resize(unsigned(r_V_3_fu_634_p2),18));
    r_V_3_fu_634_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_fu_630_p1) + unsigned(r_V_2_cast_fu_626_p1));
    r_V_4_fu_648_p2 <= std_logic_vector(unsigned(r_V_3_cast_fu_640_p1) - unsigned(rhs_V_2_cast_fu_644_p1));
    r_V_5_fu_1319_p2 <= (rhs_V_fu_1313_p2 and relu_en_V_read_reg_1394);
    r_V_6_cast_fu_676_p1 <= std_logic_vector(resize(unsigned(r_V_6_fu_668_p3),17));
    r_V_6_fu_668_p3 <= (p_1_fu_610_p3 & ap_const_lv1_0);
    r_V_7_cast_fu_690_p1 <= std_logic_vector(resize(unsigned(r_V_7_fu_684_p2),18));
    r_V_7_fu_684_p2 <= std_logic_vector(unsigned(lhs_V_4_cast_fu_680_p1) + unsigned(r_V_6_cast_fu_676_p1));
    r_V_8_fu_698_p2 <= std_logic_vector(unsigned(r_V_7_cast_fu_690_p1) - unsigned(rhs_V_5_cast_fu_694_p1));
    r_V_9_fu_1332_p0 <= r_V_9_fu_1332_p00(16 - 1 downto 0);
    r_V_9_fu_1332_p00 <= std_logic_vector(resize(unsigned(i_op_assign_1_reg_306),32));
    r_V_9_fu_1332_p1 <= rhs_V_4_cast_reg_1534(16 - 1 downto 0);
    r_V_9_mid1_fu_1382_p0 <= r_V_9_mid1_fu_1382_p00(16 - 1 downto 0);
    r_V_9_mid1_fu_1382_p00 <= std_logic_vector(resize(unsigned(i_fu_913_p2),32));
    r_V_9_mid1_fu_1382_p1 <= rhs_V_4_cast_reg_1534(16 - 1 downto 0);
    r_V_fu_490_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(lhs_V_cast_fu_486_p1));
    rev1_fu_1072_p2 <= (slt1_fu_1067_p2 xor ap_const_lv1_1);
    rev_fu_977_p2 <= (slt_fu_972_p2 xor ap_const_lv1_1);
    rhs_V_11_cast_fu_1200_p1 <= std_logic_vector(resize(unsigned(i_op_assign_phi_fu_378_p4),48));
    rhs_V_12_cast_fu_775_p1 <= std_logic_vector(resize(unsigned(CHout_V_read_reg_1420),48));
    rhs_V_13_cast_fu_778_p1 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_1431),24));
    rhs_V_14_cast_fu_781_p1 <= std_logic_vector(resize(unsigned(CHout_V_read_reg_1420),32));
    rhs_V_16_cast_fu_772_p1 <= std_logic_vector(resize(unsigned(Kx_V_read_reg_1414),16));
    rhs_V_1_fu_760_p1 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_1431),32));
    rhs_V_2_cast_fu_644_p1 <= std_logic_vector(resize(unsigned(Kx_V),18));
    rhs_V_2_fu_769_p1 <= std_logic_vector(resize(unsigned(Win_V_read_reg_1426),48));
    rhs_V_4_cast_fu_756_p1 <= std_logic_vector(resize(unsigned(Wout_V_fu_734_p2),32));
    rhs_V_5_cast_fu_694_p1 <= std_logic_vector(resize(unsigned(Ky_V),18));
    rhs_V_fu_1313_p2 <= (tmp_29_fu_1307_p2 and tmp_30_fu_434_p2);
    slt1_fu_1067_p2 <= "1" when (signed(lhs_V_7_cast_mid1_fu_1030_p1) < signed(lhs_V_4_cast_reg_1483)) else "0";
    slt_fu_972_p2 <= "1" when (signed(lhs_V_7_cast_fu_968_p1) < signed(lhs_V_4_cast_reg_1483)) else "0";
    sum_4_fu_1324_p3 <= 
        ap_const_lv32_0 when (r_V_5_fu_1319_p2(0) = '1') else 
        grp_fu_423_p2;
    sum_5_to_int_fu_1277_p1 <= grp_fu_423_p2;
    tmp1_fu_1135_p0 <= tmp1_fu_1135_p00(32 - 1 downto 0);
    tmp1_fu_1135_p00 <= std_logic_vector(resize(unsigned(grp_fu_1355_p3),48));
    tmp1_fu_1135_p1 <= rhs_V_12_cast_reg_1568(16 - 1 downto 0);
    tmp1_fu_1135_p2 <= std_logic_vector(resize(unsigned(tmp1_fu_1135_p0) * unsigned(tmp1_fu_1135_p1), 48));
    tmp2_cast_fu_1234_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_1229_p2),48));
    tmp2_fu_1229_p2 <= std_logic_vector(unsigned(tmp_10_cast_mid2_reg_1656) + unsigned(r_V_16_phi_fu_389_p4));
    tmp3_cast_fu_1144_p1 <= std_logic_vector(resize(unsigned(grp_fu_1376_p3),48));
    tmp_10_cast_fu_718_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_1438),49));
    tmp_10_cast_mid2_fu_897_p1 <= std_logic_vector(resize(unsigned(tmp_10_mid2_v_fu_886_p3),32));
    tmp_10_mid2_cast_fu_893_p1 <= std_logic_vector(resize(unsigned(tmp_10_mid2_v_fu_886_p3),31));
    tmp_10_mid2_v_fu_886_p3 <= 
        cout_fu_880_p2 when (exitcond_flatten2_reg_1619(0) = '1') else 
        i_op_assign_s_reg_282;
    tmp_11_fu_584_p4 <= r_V_1_fu_548_p2(8 downto 1);
    tmp_14_fu_763_p1 <= std_logic_vector(resize(unsigned(Sy_V_read_reg_1399),16));
    tmp_15_fu_766_p1 <= std_logic_vector(resize(unsigned(Sx_V_read_reg_1404),16));
    tmp_16_cast_fu_721_p1 <= std_logic_vector(resize(unsigned(tmp_5_reg_1443),31));
    tmp_17_cast_fu_724_p1 <= std_logic_vector(resize(unsigned(tmp_10_reg_1448),49));
    tmp_17_fu_496_p3 <= r_V_fu_490_p2(8 downto 8);
    tmp_18_fu_959_p1 <= std_logic_vector(resize(unsigned(i_op_assign_3_reg_340),16));
    tmp_18_mid1_fu_1013_p1 <= std_logic_vector(resize(unsigned(ii_fu_1007_p2),16));
    tmp_19_cast_cast_fu_1152_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_1147_p2),49));
    tmp_19_fu_1147_p2 <= std_logic_vector(unsigned(r_V_10_mid2_reg_1668) + unsigned(tmp3_cast_fu_1144_p1));
    tmp_20_fu_554_p3 <= r_V_1_fu_548_p2(8 downto 8);
    tmp_20_mid1_fu_1363_p1 <= tmp_14_reg_1547(8 - 1 downto 0);
    tmp_21_cast_fu_727_p1 <= std_logic_vector(resize(unsigned(tmp_16_reg_1453),48));
    tmp_21_fu_730_p1 <= grp_fu_662_p2(16 - 1 downto 0);
    tmp_21_mid227_v_fu_901_p3 <= 
        ap_const_lv16_0 when (exitcond_flatten2_reg_1619(0) = '1') else 
        tmp_34_fu_1338_p2;
    tmp_21_mid2_fu_932_p2 <= std_logic_vector(unsigned(tmp_21_mid2_v_fu_926_p3) - unsigned(tmp_9_reg_1524));
    tmp_21_mid2_v_fu_926_p3 <= 
        tmp_20_mid1_fu_1363_p2 when (exitcond_mid1_reg_1628(0) = '1') else 
        tmp_21_mid227_v_fu_901_p3;
    tmp_25_fu_1281_p4 <= sum_5_to_int_fu_1277_p1(30 downto 23);
    tmp_26_fu_740_p1 <= grp_fu_712_p2(16 - 1 downto 0);
    tmp_27_fu_1086_p1 <= std_logic_vector(resize(unsigned(i_op_assign_13_mid2_fu_999_p3),16));
    tmp_28_fu_1095_p2 <= (w_V_fu_1090_p2 or h_V_mid2_fu_1022_p3);
    tmp_29_fu_1307_p2 <= (notrhs_fu_1301_p2 or notlhs_fu_1295_p2);
    tmp_2_fu_510_p4 <= p_neg9_fu_504_p2(8 downto 1);
    tmp_31_fu_859_p2 <= (exitcond_mid1_fu_852_p3 or exitcond_flatten2_fu_842_p2);
    tmp_31_not_mid2_fu_1078_p3 <= 
        rev1_fu_1072_p2 when (exitcond1_fu_994_p2(0) = '1') else 
        rev_fu_977_p2;
    tmp_33_fu_1123_p2 <= "1" when (signed(lhs_V_8_cast_fu_1119_p1) < signed(lhs_V_2_cast_reg_1468)) else "0";
    tmp_34_fu_1338_p0 <= tmp_14_reg_1547(8 - 1 downto 0);
    tmp_35_fu_1291_p1 <= sum_5_to_int_fu_1277_p1(23 - 1 downto 0);
    tmp_37_fu_1238_p2 <= std_logic_vector(unsigned(tmp1_reg_1715) + unsigned(tmp2_cast_fu_1234_p1));
    tmp_38_fu_1101_p3 <= tmp_28_fu_1095_p2(15 downto 15);
    tmp_39_cast_cast_fu_1243_p1 <= std_logic_vector(resize(unsigned(tmp_37_fu_1238_p2),49));
    tmp_3_fu_520_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_2_fu_510_p4));
    tmp_4_fu_568_p4 <= p_neg_fu_562_p2(8 downto 1);
    tmp_6_fu_526_p4 <= r_V_fu_490_p2(8 downto 1);
    tmp_7_fu_744_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_26_fu_740_p1));
    tmp_8_fu_578_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_4_fu_568_p4));
    tmp_9_fu_750_p1 <= std_logic_vector(resize(unsigned(p_1_reg_1463),16));
    tmp_s_fu_753_p1 <= std_logic_vector(resize(unsigned(p_s_reg_1458),16));
    w_V_fu_1090_p2 <= std_logic_vector(unsigned(tmp_27_fu_1086_p1) + unsigned(tmp_24_reg_1641));
end behav;
