-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Pool is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Pool is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Pool,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=87.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=22,HLS_SYN_FF=2647,HLS_SYN_LUT=4558}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_pp0_stg0_fsm_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_st33_fsm_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_st34_fsm_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_st35_fsm_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_st36_fsm_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_st37_fsm_27 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_st38_fsm_28 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_st39_fsm_29 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_st40_fsm_30 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_st41_fsm_31 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5BB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "01011011101100011010001010111100";
    constant ap_const_lv32_DBB1A2BC : STD_LOGIC_VECTOR (31 downto 0) := "11011011101100011010001010111100";
    constant ap_const_lv48_1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_49 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal CHin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_V : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_V : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_V : STD_LOGIC_VECTOR (7 downto 0);
    signal mode_V : STD_LOGIC_VECTOR (1 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_sig_cseq_ST_pp0_stg0_fsm_22 : STD_LOGIC;
    signal ap_sig_121 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_1253 : STD_LOGIC_VECTOR (0 downto 0);
    signal mode_V_read_reg_1045 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_sig_cseq_ST_st35_fsm_25 : STD_LOGIC;
    signal ap_sig_179 : BOOLEAN;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_sig_cseq_ST_st36_fsm_26 : STD_LOGIC;
    signal ap_sig_187 : BOOLEAN;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_sig_cseq_ST_st41_fsm_31 : STD_LOGIC;
    signal ap_sig_195 : BOOLEAN;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_250 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_reg_261 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_op_assign_3_reg_272 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal ap_sig_336 : BOOLEAN;
    signal Kx_V_read_reg_1051 : STD_LOGIC_VECTOR (7 downto 0);
    signal Win_V_read_reg_1056 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_V_read_reg_1067 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_1073 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_reg_1078 : STD_LOGIC_VECTOR (29 downto 0);
    signal lhs_V_fu_366_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_reg_1083 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_fu_376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_reg_1090 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_cast_fu_386_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_7_cast_reg_1098 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_373 : BOOLEAN;
    signal grp_fu_370_ap_done : STD_LOGIC;
    signal grp_fu_380_ap_done : STD_LOGIC;
    signal tmp_32_cast_fu_389_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_32_cast_reg_1103 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_14_reg_1110 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_1_cast_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_cast_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_1_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_2_fu_404_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_reg_1134 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_15_fu_407_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_15_reg_1139 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_2_cast_fu_416_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_2_cast_reg_1149 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_sum_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_sum_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_reg_1160 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_453_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound_reg_1165 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond_mid_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid_reg_1170 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_472_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_1_reg_1175 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_415 : BOOLEAN;
    signal indvar_flatten_next1_fu_482_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal indvar_flatten_next1_reg_1183 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond_flatten2_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_1188 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid1_fu_498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_mid1_reg_1198 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_17_cast6_mid2_v_fu_518_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_17_cast6_mid2_v_reg_1206 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_433 : BOOLEAN;
    signal i_op_assign_17_cast6_mid2_fu_525_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_17_cast6_mid2_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_7_cast_mid2_fu_529_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_7_cast_mid2_reg_1216 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_op_assign_13_mid2_fu_555_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_13_mid2_reg_1223 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_mid2_fu_570_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_mid2_reg_1228 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_mid2_fu_581_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_1_mid2_reg_1233 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_op_assign_11_mid2_fu_588_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_11_mid2_reg_1238 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_15_cast4_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_15_cast4_reg_1243 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_986_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1248 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_flatten_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter8 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_604_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_v_v_v_v_v_v_fu_629_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_4_mid2_v_v_v_v_v_v_reg_1262 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_3_reg_1267 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_reg_1273 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_1279 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_24 : STD_LOGIC;
    signal ap_sig_514 : BOOLEAN;
    signal gmem_addr_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_961_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_1300 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_next7_fu_972_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_next7_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten1_reg_191 : STD_LOGIC_VECTOR (47 downto 0);
    signal op_assign_8_reg_202 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten6_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_s_reg_226 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_1_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_2_phi_fu_265_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_4_phi_fu_297_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_phiprechg_sum_4_reg_293pp0_it9 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_1_sum_3_fu_925_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_feature_in_load_2_fu_832_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_5_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_23 : STD_LOGIC;
    signal ap_sig_579 : BOOLEAN;
    signal feature_in2_sum_cast_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in2_sum5_cast_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in2_sum6_cast_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out4_sum_cast_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_AWREADY : STD_LOGIC;
    signal ap_reg_ioackin_gmem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_WREADY : STD_LOGIC;
    signal tmp_s_fu_332_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_15_fu_407_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_15_fu_407_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_424_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_453_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_453_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_1003_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_472_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_472_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_512_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_1025_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_11_mid_fu_505_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_545_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of i_fu_545_p2 : signal is "no";
    signal r_V_mid1_fu_997_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_mid1_fu_991_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_mid_fu_533_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_mid1_fu_576_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_mid1_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_mid1_fu_576_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_1_mid_fu_539_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal exitcond1_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii7_fu_623_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_4_mid2_v_v_v_v_v_fu_637_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_v_v_v_v_fu_641_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_v_v_fu_650_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_v_v_fu_650_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_v_v_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_mid2_fu_659_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_mid2_fu_659_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_op_assign_14_mid2_fu_615_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_664_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_fu_668_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of w_V_fu_668_p2 : signal is "no";
    signal grp_fu_1037_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_13_fu_677_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of r_V_13_fu_677_p2 : signal is "no";
    signal feature_in2_sum_fu_681_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_1009_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_10_fu_700_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of r_V_10_fu_700_p2 : signal is "no";
    signal feature_in2_sum5_fu_704_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_1017_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_7_fu_723_p2 : STD_LOGIC_VECTOR (47 downto 0);
    attribute use_dsp48 of r_V_7_fu_723_p2 : signal is "no";
    signal feature_in2_sum6_fu_727_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sum_3_to_int7_fu_748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_2_to_int_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_752_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_762_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_770_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_780_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs9_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_3_to_int_fu_841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal feature_in_load_1_to_int_fu_859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_845_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_855_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_863_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_873_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1031_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_cast_fu_934_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_8_fu_937_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_17_cast_cast_fu_942_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal feature_out4_sum_fu_946_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal indvar_flatten6_op_fu_966_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_979_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound4_fu_979_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_986_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_mid1_fu_991_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_mid1_fu_997_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_mid1_fu_997_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_1003_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_1003_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1009_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_mid2_fu_659_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_1017_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_1025_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1031_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1031_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1031_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1037_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_370_ap_start : STD_LOGIC;
    signal grp_fu_380_ap_start : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_979_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_979_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_453_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound_fu_453_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_370_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_380_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_1_fu_472_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_1_mid1_fu_576_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_fu_1003_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_mid1_fu_997_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_1217 : BOOLEAN;
    signal ap_sig_1219 : BOOLEAN;

    component Pool_fadd_32ns_32ns_32_1_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fdiv_32ns_32ns_32_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_sitofp_32ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Pool_udiv_16ns_8ns_16_20_seq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Pool_mul_mul_16ns_16ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_mul_mul_8ns_16s_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Pool_mac_muladd_16s_16ns_48ns_48_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Pool_mul_mul_16s_8ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Pool_mac_muladd_16ns_16ns_16ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        CHin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (1 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Pool_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Pool_AXILiteS_s_axi_U : component Pool_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        CHin_V => CHin_V,
        Hin_V => Hin_V,
        Win_V => Win_V,
        Kx_V => Kx_V,
        Ky_V => Ky_V,
        mode_V => mode_V,
        feature_in => feature_in,
        feature_out => feature_out);

    Pool_gmem_m_axi_U : component Pool_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_1295,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => sum_5_reg_309,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Pool_fadd_32ns_32ns_32_1_full_dsp_U0 : component Pool_fadd_32ns_32ns_32_1_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => sum_3_reg_283,
        din1 => reg_340,
        dout => sum_2_fu_321_p2);

    Pool_fdiv_32ns_32ns_32_2_U1 : component Pool_fdiv_32ns_32ns_32_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_3_reg_283,
        din1 => tmp_s_reg_1144,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p2);

    Pool_sitofp_32ns_32_1_U2 : component Pool_sitofp_32ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_s_fu_332_p0,
        dout => tmp_s_fu_332_p1);

    Pool_fcmp_32ns_32ns_1_1_U3 : component Pool_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sum_3_reg_283,
        din1 => reg_340,
        opcode => ap_const_lv5_2,
        dout => grp_fu_335_p2);

    Pool_udiv_16ns_8ns_16_20_seq_U4 : component Pool_udiv_16ns_8ns_16_20_seq
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_370_ap_start,
        done => grp_fu_370_ap_done,
        din0 => Win_V,
        din1 => grp_fu_370_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_370_p2);

    Pool_udiv_16ns_8ns_16_20_seq_U5 : component Pool_udiv_16ns_8ns_16_20_seq
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_380_ap_start,
        done => grp_fu_380_ap_done,
        din0 => Hin_V,
        din1 => grp_fu_380_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_380_p2);

    Pool_mul_mul_16ns_16ns_32_1_U6 : component Pool_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => bound4_fu_979_p0,
        din1 => bound4_fu_979_p1,
        dout => bound4_fu_979_p2);

    Pool_mul_mul_8ns_16s_16_1_U7 : component Pool_mul_mul_8ns_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_5_fu_986_p0,
        din1 => i_op_assign_13_mid2_fu_555_p3,
        dout => tmp_5_fu_986_p2);

    Pool_mul_mul_8ns_16s_16_1_U8 : component Pool_mul_mul_8ns_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_1_mid1_fu_991_p0,
        din1 => i_fu_545_p2,
        dout => tmp_1_mid1_fu_991_p2);

    Pool_mul_mul_16ns_16ns_32_1_U9 : component Pool_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_mid1_fu_997_p0,
        din1 => r_V_mid1_fu_997_p1,
        dout => r_V_mid1_fu_997_p2);

    Pool_mul_mul_16ns_16ns_32_1_U10 : component Pool_mul_mul_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_fu_1003_p0,
        din1 => r_V_fu_1003_p1,
        dout => r_V_fu_1003_p2);

    Pool_mac_muladd_16s_16ns_48ns_48_1_U11 : component Pool_mac_muladd_16s_16ns_48ns_48_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => w_V_fu_668_p2,
        din1 => grp_fu_1009_p1,
        din2 => r_V_4_mid2_fu_659_p2,
        dout => grp_fu_1009_p3);

    Pool_mac_muladd_16s_16ns_48ns_48_1_U12 : component Pool_mac_muladd_16s_16ns_48ns_48_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => w_V_fu_668_p2,
        din1 => grp_fu_1017_p1,
        din2 => r_V_4_mid2_fu_659_p2,
        dout => grp_fu_1017_p3);

    Pool_mul_mul_16s_8ns_16_1_U13 : component Pool_mul_mul_16s_8ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => i_op_assign_s_reg_226,
        din1 => tmp_11_fu_1025_p1,
        dout => tmp_11_fu_1025_p2);

    Pool_mac_muladd_16ns_16ns_16ns_32_1_U14 : component Pool_mac_muladd_16ns_16ns_16ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_1031_p0,
        din1 => grp_fu_1031_p1,
        din2 => grp_fu_1031_p2,
        dout => grp_fu_1031_p3);

    Pool_mac_muladd_16s_16ns_48ns_48_1_U15 : component Pool_mac_muladd_16s_16ns_48ns_48_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        din0 => w_V_fu_668_p2,
        din1 => grp_fu_1037_p1,
        din2 => r_V_4_mid2_fu_659_p2,
        dout => grp_fu_1037_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_1 = gmem_ARREADY) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_1 = gmem_ARREADY) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_1 = gmem_ARREADY) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))))) then 
                    ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_25)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_AWREADY)) then 
                        ap_reg_ioackin_gmem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_26)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_WREADY)) then 
                        ap_reg_ioackin_gmem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) and not((ap_const_lv1_0 = exitcond_flatten_fu_599_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                    ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_1_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_31) and not((gmem_BVALID = ap_const_logic_0)))) then 
                i_op_assign_1_reg_238 <= j_reg_1300;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not(((ap_const_logic_0 = grp_fu_370_ap_done) or (ap_const_logic_0 = grp_fu_380_ap_done))))) then 
                i_op_assign_1_reg_238 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_op_assign_2_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))))) then 
                i_op_assign_2_reg_261 <= r_V_4_mid2_v_v_v_v_v_v_reg_1262;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                i_op_assign_2_reg_261 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_3_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) and (ap_const_lv1_0 = exitcond_flatten_fu_599_p2))) then 
                i_op_assign_3_reg_272 <= jj_fu_742_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                i_op_assign_3_reg_272 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    i_op_assign_s_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_31) and not((gmem_BVALID = ap_const_logic_0)))) then 
                i_op_assign_s_reg_226 <= i_op_assign_11_mid2_reg_1238;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not(((ap_const_logic_0 = grp_fu_370_ap_done) or (ap_const_logic_0 = grp_fu_380_ap_done))))) then 
                i_op_assign_s_reg_226 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_31) and not((gmem_BVALID = ap_const_logic_0)))) then 
                indvar_flatten1_reg_191 <= indvar_flatten_next1_reg_1183;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not(((ap_const_logic_0 = grp_fu_370_ap_done) or (ap_const_logic_0 = grp_fu_380_ap_done))))) then 
                indvar_flatten1_reg_191 <= ap_const_lv48_0;
            end if; 
        end if;
    end process;

    indvar_flatten6_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_31) and not((gmem_BVALID = ap_const_logic_0)))) then 
                indvar_flatten6_reg_214 <= indvar_flatten_next7_reg_1305;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not(((ap_const_logic_0 = grp_fu_370_ap_done) or (ap_const_logic_0 = grp_fu_380_ap_done))))) then 
                indvar_flatten6_reg_214 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) and (ap_const_lv1_0 = exitcond_flatten_fu_599_p2))) then 
                indvar_flatten_reg_250 <= indvar_flatten_next_fu_604_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                indvar_flatten_reg_250 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    op_assign_8_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_31) and not((gmem_BVALID = ap_const_logic_0)))) then 
                op_assign_8_reg_202 <= i_op_assign_17_cast6_mid2_v_reg_1206;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not(((ap_const_logic_0 = grp_fu_370_ap_done) or (ap_const_logic_0 = grp_fu_380_ap_done))))) then 
                op_assign_8_reg_202 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    sum_3_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter8))) then 
                sum_3_reg_283 <= sum_4_phi_fu_297_p8;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                sum_3_reg_283 <= p_sum_reg_1155;
            end if; 
        end if;
    end process;

    sum_5_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_6_reg_1130) and (ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_23))) then 
                sum_5_reg_309 <= sum_3_reg_283;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_24) and not((ap_const_lv1_0 = tmp_6_reg_1130)))) then 
                sum_5_reg_309 <= grp_fu_327_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                CHin_V_read_reg_1067 <= CHin_V;
                Kx_V_read_reg_1051 <= Kx_V;
                Win_V_read_reg_1056 <= Win_V;
                    lhs_V_reg_1083(7 downto 0) <= lhs_V_fu_366_p1(7 downto 0);
                mode_V_read_reg_1045 <= mode_V;
                    rhs_V_reg_1090(7 downto 0) <= rhs_V_fu_376_p1(7 downto 0);
                tmp_1_reg_1073 <= feature_out(31 downto 2);
                tmp_7_reg_1078 <= feature_in(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))))) then
                ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter1 <= exitcond_flatten_reg_1253;
                exitcond_flatten_reg_1253 <= exitcond_flatten_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) then
                ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter2 <= ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter1;
                ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter3 <= ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter2;
                ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter4 <= ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter3;
                ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter5 <= ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter4;
                ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter6 <= ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter5;
                ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7 <= ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter6;
                ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter8 <= ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not(((ap_const_logic_0 = grp_fu_370_ap_done) or (ap_const_logic_0 = grp_fu_380_ap_done))))) then
                bound4_reg_1160 <= bound4_fu_979_p2;
                bound_reg_1165 <= bound_fu_453_p2;
                exitcond_mid_reg_1170 <= exitcond_mid_fu_459_p2;
                    p_sum_reg_1155(5 downto 2) <= p_sum_fu_438_p3(5 downto 2);    p_sum_reg_1155(7) <= p_sum_fu_438_p3(7);    p_sum_reg_1155(9) <= p_sum_fu_438_p3(9);    p_sum_reg_1155(13) <= p_sum_fu_438_p3(13);    p_sum_reg_1155(16 downto 15) <= p_sum_fu_438_p3(16 downto 15);    p_sum_reg_1155(21 downto 20) <= p_sum_fu_438_p3(21 downto 20);    p_sum_reg_1155(25 downto 23) <= p_sum_fu_438_p3(25 downto 23);    p_sum_reg_1155(28 downto 27) <= p_sum_fu_438_p3(28 downto 27);    p_sum_reg_1155(31 downto 30) <= p_sum_fu_438_p3(31 downto 30);
                r_V_14_reg_1110 <= grp_fu_370_p2;
                r_V_15_reg_1139 <= r_V_15_fu_407_p2;
                    rhs_V_1_cast_reg_1115(15 downto 0) <= rhs_V_1_cast_fu_392_p1(15 downto 0);
                    rhs_V_1_reg_1121(15 downto 0) <= rhs_V_1_fu_396_p1(15 downto 0);
                    rhs_V_2_cast_reg_1149(15 downto 0) <= rhs_V_2_cast_fu_416_p1(15 downto 0);
                    rhs_V_2_reg_1134(15 downto 0) <= rhs_V_2_fu_404_p1(15 downto 0);
                    tmp_32_cast_reg_1103(29 downto 0) <= tmp_32_cast_fu_389_p1(29 downto 0);
                tmp_6_reg_1130 <= tmp_6_fu_399_p2;
                    tmp_7_cast_reg_1098(29 downto 0) <= tmp_7_cast_fu_386_p1(29 downto 0);
                tmp_s_reg_1144 <= tmp_s_fu_332_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = exitcond_flatten1_fu_477_p2))) then
                exitcond_flatten2_reg_1188 <= exitcond_flatten2_fu_488_p2;
                exitcond_mid1_reg_1198 <= exitcond_mid1_fu_498_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (mode_V_read_reg_1045 = ap_const_lv2_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) and (ap_const_lv1_0 = exitcond_flatten_fu_599_p2))) then
                gmem_addr_1_reg_1279 <= feature_in2_sum6_cast_fu_732_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (mode_V_read_reg_1045 = ap_const_lv2_1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) and (ap_const_lv1_0 = exitcond_flatten_fu_599_p2))) then
                gmem_addr_2_reg_1273 <= feature_in2_sum5_cast_fu_709_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (mode_V_read_reg_1045 = ap_const_lv2_2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) and (ap_const_lv1_0 = exitcond_flatten_fu_599_p2))) then
                gmem_addr_3_reg_1267 <= feature_in2_sum_cast_fu_686_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_24)) then
                gmem_addr_reg_1295 <= feature_out4_sum_cast_fu_951_p1(32 - 1 downto 0);
                indvar_flatten_next7_reg_1305 <= indvar_flatten_next7_fu_972_p3;
                j_reg_1300 <= j_fu_961_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                i_op_assign_11_mid2_reg_1238 <= i_op_assign_11_mid2_fu_588_p3;
                i_op_assign_13_mid2_reg_1223 <= i_op_assign_13_mid2_fu_555_p3;
                    i_op_assign_15_cast4_reg_1243(15 downto 0) <= i_op_assign_15_cast4_fu_595_p1(15 downto 0);
                    i_op_assign_17_cast6_mid2_reg_1211(15 downto 0) <= i_op_assign_17_cast6_mid2_fu_525_p1(15 downto 0);
                i_op_assign_17_cast6_mid2_v_reg_1206 <= i_op_assign_17_cast6_mid2_v_fu_518_p3;
                r_V_1_mid2_reg_1233 <= r_V_1_mid2_fu_581_p3;
                    rhs_V_7_cast_mid2_reg_1216(15 downto 0) <= rhs_V_7_cast_mid2_fu_529_p1(15 downto 0);
                tmp_1_mid2_reg_1228 <= tmp_1_mid2_fu_570_p3;
                tmp_5_reg_1248 <= tmp_5_fu_986_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                indvar_flatten_next1_reg_1183 <= indvar_flatten_next1_fu_482_p2;
                r_V_1_reg_1175 <= r_V_1_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) and (ap_const_lv1_0 = exitcond_flatten_fu_599_p2))) then
                r_V_4_mid2_v_v_v_v_v_v_reg_1262 <= r_V_4_mid2_v_v_v_v_v_v_fu_629_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and (mode_V_read_reg_1045 = ap_const_lv2_2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and (mode_V_read_reg_1045 = ap_const_lv2_1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))))) then
                reg_340 <= gmem_RDATA;
            end if;
        end if;
    end process;
    lhs_V_reg_1083(15 downto 8) <= "00000000";
    rhs_V_reg_1090(15 downto 8) <= "00000000";
    tmp_7_cast_reg_1098(48 downto 30) <= "0000000000000000000";
    tmp_32_cast_reg_1103(47 downto 30) <= "000000000000000000";
    rhs_V_1_cast_reg_1115(31 downto 16) <= "0000000000000000";
    rhs_V_1_reg_1121(31 downto 16) <= "0000000000000000";
    rhs_V_2_reg_1134(47 downto 16) <= "00000000000000000000000000000000";
    rhs_V_2_cast_reg_1149(47 downto 16) <= "00000000000000000000000000000000";
    p_sum_reg_1155(1 downto 0) <= "00";
    p_sum_reg_1155(6 downto 6) <= "0";
    p_sum_reg_1155(8 downto 8) <= "0";
    p_sum_reg_1155(12 downto 10) <= "000";
    p_sum_reg_1155(14 downto 14) <= "0";
    p_sum_reg_1155(19 downto 17) <= "000";
    p_sum_reg_1155(22 downto 22) <= "0";
    p_sum_reg_1155(26 downto 26) <= "0";
    p_sum_reg_1155(29) <= '0';
    i_op_assign_17_cast6_mid2_reg_1211(31 downto 16) <= "0000000000000000";
    rhs_V_7_cast_mid2_reg_1216(47 downto 16) <= "00000000000000000000000000000000";
    i_op_assign_15_cast4_reg_1243(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it9, exitcond_flatten_reg_1253, mode_V_read_reg_1045, gmem_BVALID, ap_sig_ioackin_gmem_ARREADY, ap_sig_336, grp_fu_370_ap_done, grp_fu_380_ap_done, exitcond_flatten1_fu_477_p2, ap_sig_ioackin_gmem_AWREADY, ap_sig_ioackin_gmem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                if (not(((ap_const_logic_0 = grp_fu_370_ap_done) or (ap_const_logic_0 = grp_fu_380_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st21_fsm_20 => 
                if (not((ap_const_lv1_0 = exitcond_flatten1_fu_477_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_22;
            when ap_ST_pp0_stg0_fsm_22 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it8))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_22;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it8)))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_22;
                end if;
            when ap_ST_st33_fsm_23 => 
                ap_NS_fsm <= ap_ST_st34_fsm_24;
            when ap_ST_st34_fsm_24 => 
                ap_NS_fsm <= ap_ST_st35_fsm_25;
            when ap_ST_st35_fsm_25 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_AWREADY))) then
                    ap_NS_fsm <= ap_ST_st36_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st35_fsm_25;
                end if;
            when ap_ST_st36_fsm_26 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_gmem_WREADY))) then
                    ap_NS_fsm <= ap_ST_st37_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_st36_fsm_26;
                end if;
            when ap_ST_st37_fsm_27 => 
                ap_NS_fsm <= ap_ST_st38_fsm_28;
            when ap_ST_st38_fsm_28 => 
                ap_NS_fsm <= ap_ST_st39_fsm_29;
            when ap_ST_st39_fsm_29 => 
                ap_NS_fsm <= ap_ST_st40_fsm_30;
            when ap_ST_st40_fsm_30 => 
                ap_NS_fsm <= ap_ST_st41_fsm_31;
            when ap_ST_st41_fsm_31 => 
                if (not((gmem_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st41_fsm_31;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, exitcond_flatten1_fu_477_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond_flatten1_fu_477_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, exitcond_flatten1_fu_477_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond_flatten1_fu_477_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_sum_4_reg_293pp0_it9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_121 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_1217_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_22, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it8, exitcond_flatten_reg_1253, ap_sig_336, ap_reg_ioackin_gmem_ARREADY)
    begin
                ap_sig_1217 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY));
    end process;


    ap_sig_1219_assign_proc : process(ap_reg_ppiten_pp0_it9, ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter8)
    begin
                ap_sig_1219 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter8));
    end process;


    ap_sig_179_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_179 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_187_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_187 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_195_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_195 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_336_assign_proc : process(mode_V_read_reg_1045, ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7, gmem_RVALID)
    begin
                ap_sig_336 <= (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (gmem_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (gmem_RVALID = ap_const_logic_0)) or ((mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and (gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_sig_373_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_373 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_415_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_415 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_433_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_433 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_49_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_49 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_514_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_514 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_579_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_579 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_22_assign_proc : process(ap_sig_121)
    begin
        if (ap_sig_121) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_49)
    begin
        if (ap_sig_49) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_373)
    begin
        if (ap_sig_373) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_415)
    begin
        if (ap_sig_415) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_433)
    begin
        if (ap_sig_433) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st33_fsm_23_assign_proc : process(ap_sig_579)
    begin
        if (ap_sig_579) then 
            ap_sig_cseq_ST_st33_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st34_fsm_24_assign_proc : process(ap_sig_514)
    begin
        if (ap_sig_514) then 
            ap_sig_cseq_ST_st34_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st35_fsm_25_assign_proc : process(ap_sig_179)
    begin
        if (ap_sig_179) then 
            ap_sig_cseq_ST_st35_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st36_fsm_26_assign_proc : process(ap_sig_187)
    begin
        if (ap_sig_187) then 
            ap_sig_cseq_ST_st36_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st41_fsm_31_assign_proc : process(ap_sig_195)
    begin
        if (ap_sig_195) then 
            ap_sig_cseq_ST_st41_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st41_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_AWREADY_assign_proc : process(gmem_AWREADY, ap_reg_ioackin_gmem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY)) then 
            ap_sig_ioackin_gmem_AWREADY <= gmem_AWREADY;
        else 
            ap_sig_ioackin_gmem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_WREADY_assign_proc : process(gmem_WREADY, ap_reg_ioackin_gmem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY)) then 
            ap_sig_ioackin_gmem_WREADY <= gmem_WREADY;
        else 
            ap_sig_ioackin_gmem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bound4_fu_979_p0 <= bound4_fu_979_p00(16 - 1 downto 0);
    bound4_fu_979_p00 <= std_logic_vector(resize(unsigned(grp_fu_370_p2),32));
    bound4_fu_979_p1 <= bound4_fu_979_p10(16 - 1 downto 0);
    bound4_fu_979_p10 <= std_logic_vector(resize(unsigned(grp_fu_380_p2),32));
    bound_fu_453_p0 <= bound_fu_453_p00(32 - 1 downto 0);
    bound_fu_453_p00 <= std_logic_vector(resize(unsigned(bound4_fu_979_p2),48));
    bound_fu_453_p1 <= bound_fu_453_p10(16 - 1 downto 0);
    bound_fu_453_p10 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_1067),48));
    bound_fu_453_p2 <= std_logic_vector(resize(unsigned(bound_fu_453_p0) * unsigned(bound_fu_453_p1), 48));
    c_fu_512_p2 <= std_logic_vector(unsigned(op_assign_8_reg_202) + unsigned(ap_const_lv16_1));
    exitcond1_fu_610_p2 <= "1" when (i_op_assign_3_reg_272 = Kx_V_read_reg_1051) else "0";
    exitcond_flatten1_fu_477_p2 <= "1" when (indvar_flatten1_reg_191 = bound_reg_1165) else "0";
    exitcond_flatten2_fu_488_p2 <= "1" when (indvar_flatten6_reg_214 = bound4_reg_1160) else "0";
    exitcond_flatten_fu_599_p2 <= "1" when (indvar_flatten_reg_250 = r_V_15_reg_1139) else "0";
    exitcond_fu_493_p2 <= "1" when (i_op_assign_1_reg_238 = r_V_14_reg_1110) else "0";
    exitcond_mid1_fu_498_p3 <= 
        exitcond_mid_reg_1170 when (exitcond_flatten2_fu_488_p2(0) = '1') else 
        exitcond_fu_493_p2;
    exitcond_mid_fu_459_p2 <= "1" when (grp_fu_370_p2 = ap_const_lv16_0) else "0";
        feature_in2_sum5_cast_fu_709_p1 <= std_logic_vector(resize(signed(feature_in2_sum5_fu_704_p2),64));

    feature_in2_sum5_fu_704_p2 <= std_logic_vector(unsigned(tmp_32_cast_reg_1103) + unsigned(r_V_10_fu_700_p2));
        feature_in2_sum6_cast_fu_732_p1 <= std_logic_vector(resize(signed(feature_in2_sum6_fu_727_p2),64));

    feature_in2_sum6_fu_727_p2 <= std_logic_vector(unsigned(r_V_7_fu_723_p2) + unsigned(tmp_32_cast_reg_1103));
        feature_in2_sum_cast_fu_686_p1 <= std_logic_vector(resize(signed(feature_in2_sum_fu_681_p2),64));

    feature_in2_sum_fu_681_p2 <= std_logic_vector(unsigned(tmp_32_cast_reg_1103) + unsigned(r_V_13_fu_677_p2));
    feature_in_load_1_sum_3_fu_925_p3 <= 
        reg_340 when (tmp_21_fu_919_p2(0) = '1') else 
        sum_3_reg_283;
    feature_in_load_1_to_int_fu_859_p1 <= reg_340;
    feature_in_load_2_to_int_fu_766_p1 <= reg_340;
    feature_out4_sum_cast_fu_951_p1 <= std_logic_vector(resize(unsigned(feature_out4_sum_fu_946_p2),64));
    feature_out4_sum_fu_946_p2 <= std_logic_vector(unsigned(tmp_17_cast_cast_fu_942_p1) + unsigned(tmp_7_cast_reg_1098));

    gmem_ARADDR_assign_proc : process(mode_V_read_reg_1045, gmem_addr_3_reg_1267, gmem_addr_2_reg_1273, gmem_addr_1_reg_1279, ap_sig_1217)
    begin
        if (ap_sig_1217) then
            if ((mode_V_read_reg_1045 = ap_const_lv2_0)) then 
                gmem_ARADDR <= gmem_addr_1_reg_1279;
            elsif ((mode_V_read_reg_1045 = ap_const_lv2_1)) then 
                gmem_ARADDR <= gmem_addr_2_reg_1273;
            elsif ((mode_V_read_reg_1045 = ap_const_lv2_2)) then 
                gmem_ARADDR <= gmem_addr_3_reg_1267;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_22, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it8, exitcond_flatten_reg_1253, mode_V_read_reg_1045, ap_sig_336, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_sig_cseq_ST_st35_fsm_25, ap_reg_ioackin_gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_25) and (ap_const_logic_0 = ap_reg_ioackin_gmem_AWREADY))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_sig_cseq_ST_st41_fsm_31, gmem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_31) and not((gmem_BVALID = ap_const_logic_0)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it8, exitcond_flatten_reg_1253, mode_V_read_reg_1045, ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7, ap_sig_ioackin_gmem_ARREADY, ap_sig_336)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and (mode_V_read_reg_1045 = ap_const_lv2_2) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and (mode_V_read_reg_1045 = ap_const_lv2_1) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)) or ((exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_logic_0 = ap_sig_ioackin_gmem_ARREADY)))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and ap_sig_336)))))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_sig_cseq_ST_st36_fsm_26, ap_reg_ioackin_gmem_WREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_26) and (ap_const_logic_0 = ap_reg_ioackin_gmem_WREADY))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_sig_cseq_ST_pp0_stg0_fsm_22, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_1253, mode_V_read_reg_1045)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0) and (mode_V_read_reg_1045 = ap_const_lv2_2)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_sig_cseq_ST_st35_fsm_25)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_25)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_sig_cseq_ST_st41_fsm_31)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st41_fsm_31)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_reg_ppiten_pp0_it8, mode_V_read_reg_1045, ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (mode_V_read_reg_1045 = ap_const_lv2_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and (mode_V_read_reg_1045 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1253_pp0_iter7) and (mode_V_read_reg_1045 = ap_const_lv2_2)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_sig_cseq_ST_st36_fsm_26)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_26)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1009_p1 <= rhs_V_1_reg_1121(16 - 1 downto 0);
    grp_fu_1017_p1 <= rhs_V_1_reg_1121(16 - 1 downto 0);
    grp_fu_1031_p0 <= rhs_V_1_reg_1121(16 - 1 downto 0);
    grp_fu_1031_p1 <= i_op_assign_15_cast4_reg_1243(16 - 1 downto 0);
    grp_fu_1031_p2 <= i_op_assign_17_cast6_mid2_reg_1211(16 - 1 downto 0);
    grp_fu_1037_p1 <= rhs_V_1_reg_1121(16 - 1 downto 0);

    grp_fu_370_ap_start_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            grp_fu_370_ap_start <= ap_const_logic_1;
        else 
            grp_fu_370_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_370_p1 <= grp_fu_370_p10(8 - 1 downto 0);
    grp_fu_370_p10 <= std_logic_vector(resize(unsigned(Kx_V),16));

    grp_fu_380_ap_start_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            grp_fu_380_ap_start <= ap_const_logic_1;
        else 
            grp_fu_380_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_380_p1 <= grp_fu_380_p10(8 - 1 downto 0);
    grp_fu_380_p10 <= std_logic_vector(resize(unsigned(Ky_V),16));
    i_fu_545_p2 <= std_logic_vector(unsigned(i_op_assign_11_mid_fu_505_p3) + unsigned(ap_const_lv16_1));
    i_op_assign_11_mid2_fu_588_p3 <= 
        i_fu_545_p2 when (exitcond_mid1_reg_1198(0) = '1') else 
        i_op_assign_11_mid_fu_505_p3;
    i_op_assign_11_mid_fu_505_p3 <= 
        ap_const_lv16_0 when (exitcond_flatten2_reg_1188(0) = '1') else 
        i_op_assign_s_reg_226;
    i_op_assign_13_mid2_fu_555_p3 <= 
        ap_const_lv16_0 when (tmp_12_fu_551_p2(0) = '1') else 
        i_op_assign_1_reg_238;
    i_op_assign_14_mid2_fu_615_p3 <= 
        ap_const_lv8_0 when (exitcond1_fu_610_p2(0) = '1') else 
        i_op_assign_3_reg_272;
    i_op_assign_15_cast4_fu_595_p1 <= std_logic_vector(resize(unsigned(i_op_assign_13_mid2_fu_555_p3),32));
    i_op_assign_17_cast6_mid2_fu_525_p1 <= std_logic_vector(resize(unsigned(i_op_assign_17_cast6_mid2_v_fu_518_p3),32));
    i_op_assign_17_cast6_mid2_v_fu_518_p3 <= 
        c_fu_512_p2 when (exitcond_flatten2_reg_1188(0) = '1') else 
        op_assign_8_reg_202;

    i_op_assign_2_phi_fu_265_p4_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_22, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_1253, i_op_assign_2_reg_261, r_V_4_mid2_v_v_v_v_v_v_reg_1262)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_22) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1253 = ap_const_lv1_0))) then 
            i_op_assign_2_phi_fu_265_p4 <= r_V_4_mid2_v_v_v_v_v_v_reg_1262;
        else 
            i_op_assign_2_phi_fu_265_p4 <= i_op_assign_2_reg_261;
        end if; 
    end process;

    ii7_fu_623_p2 <= std_logic_vector(unsigned(i_op_assign_2_phi_fu_265_p4) + unsigned(ap_const_lv8_1));
    indvar_flatten6_op_fu_966_p2 <= std_logic_vector(unsigned(indvar_flatten6_reg_214) + unsigned(ap_const_lv32_1));
    indvar_flatten_next1_fu_482_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_191) + unsigned(ap_const_lv48_1));
    indvar_flatten_next7_fu_972_p3 <= 
        ap_const_lv32_1 when (exitcond_flatten2_reg_1188(0) = '1') else 
        indvar_flatten6_op_fu_966_p2;
    indvar_flatten_next_fu_604_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_250) + unsigned(ap_const_lv16_1));
    j_fu_961_p2 <= std_logic_vector(signed(i_op_assign_13_mid2_reg_1223) + signed(ap_const_lv16_1));
    jj_fu_742_p2 <= std_logic_vector(unsigned(i_op_assign_14_mid2_fu_615_p3) + unsigned(ap_const_lv8_1));
    lhs_V_fu_366_p1 <= std_logic_vector(resize(unsigned(Kx_V),16));
    notlhs1_fu_877_p2 <= "0" when (tmp_13_fu_845_p4 = ap_const_lv8_FF) else "1";
    notlhs2_fu_895_p2 <= "0" when (tmp_15_fu_863_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_802_p2 <= "0" when (tmp_24_fu_770_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_784_p2 <= "0" when (tmp_22_fu_752_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_883_p2 <= "1" when (tmp_14_fu_855_p1 = ap_const_lv23_0) else "0";
    notrhs2_fu_901_p2 <= "1" when (tmp_16_fu_873_p1 = ap_const_lv23_0) else "0";
    notrhs9_fu_808_p2 <= "1" when (tmp_25_fu_780_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_790_p2 <= "1" when (tmp_23_fu_762_p1 = ap_const_lv23_0) else "0";
    p_sum_fu_438_p3 <= 
        sum_fu_424_p3 when (tmp_2_fu_432_p2(0) = '1') else 
        ap_const_lv32_DBB1A2BC;
    r_V_10_fu_700_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_mid2_reg_1216) + unsigned(grp_fu_1009_p3));
    r_V_13_fu_677_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_mid2_reg_1216) + unsigned(grp_fu_1037_p3));
    r_V_15_fu_407_p0 <= lhs_V_reg_1083(8 - 1 downto 0);
    r_V_15_fu_407_p1 <= rhs_V_reg_1090(8 - 1 downto 0);
    r_V_15_fu_407_p2 <= std_logic_vector(resize(unsigned(r_V_15_fu_407_p0) * unsigned(r_V_15_fu_407_p1), 16));
    r_V_1_fu_472_p0 <= r_V_1_fu_472_p00(32 - 1 downto 0);
    r_V_1_fu_472_p00 <= std_logic_vector(resize(unsigned(r_V_fu_1003_p2),48));
    r_V_1_fu_472_p1 <= rhs_V_2_cast_reg_1149(16 - 1 downto 0);
    r_V_1_fu_472_p2 <= std_logic_vector(resize(unsigned(r_V_1_fu_472_p0) * unsigned(r_V_1_fu_472_p1), 48));
    r_V_1_mid1_fu_576_p0 <= rhs_V_2_cast_reg_1149(16 - 1 downto 0);
    r_V_1_mid1_fu_576_p1 <= r_V_1_mid1_fu_576_p10(32 - 1 downto 0);
    r_V_1_mid1_fu_576_p10 <= std_logic_vector(resize(unsigned(r_V_mid1_fu_997_p2),48));
    r_V_1_mid1_fu_576_p2 <= std_logic_vector(resize(unsigned(r_V_1_mid1_fu_576_p0) * unsigned(r_V_1_mid1_fu_576_p1), 48));
    r_V_1_mid2_fu_581_p3 <= 
        r_V_1_mid1_fu_576_p2 when (exitcond_mid1_reg_1198(0) = '1') else 
        r_V_1_mid_fu_539_p3;
    r_V_1_mid_fu_539_p3 <= 
        ap_const_lv48_0 when (exitcond_flatten2_reg_1188(0) = '1') else 
        r_V_1_reg_1175;
    r_V_4_mid2_fu_659_p0 <= r_V_4_mid2_v_v_fu_650_p2;
    r_V_4_mid2_fu_659_p1 <= rhs_V_2_reg_1134(16 - 1 downto 0);
    r_V_4_mid2_fu_659_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(r_V_4_mid2_fu_659_p0) * signed('0' &r_V_4_mid2_fu_659_p1))), 48));
    r_V_4_mid2_v_v_fu_650_p0 <= rhs_V_1_reg_1121(16 - 1 downto 0);
    r_V_4_mid2_v_v_fu_650_p1 <= r_V_4_mid2_v_v_v_v_fu_641_p2;
    r_V_4_mid2_v_v_fu_650_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &r_V_4_mid2_v_v_fu_650_p0) * signed(r_V_4_mid2_v_v_fu_650_p1))), 32));
    r_V_4_mid2_v_v_v_v_fu_641_p2 <= std_logic_vector(unsigned(r_V_4_mid2_v_v_v_v_v_fu_637_p1) + unsigned(tmp_1_mid2_reg_1228));
    r_V_4_mid2_v_v_v_v_v_fu_637_p1 <= std_logic_vector(resize(unsigned(r_V_4_mid2_v_v_v_v_v_v_fu_629_p3),16));
    r_V_4_mid2_v_v_v_v_v_v_fu_629_p3 <= 
        ii7_fu_623_p2 when (exitcond1_fu_610_p2(0) = '1') else 
        i_op_assign_2_phi_fu_265_p4;
    r_V_7_fu_723_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_mid2_reg_1216) + unsigned(grp_fu_1017_p3));
    r_V_fu_1003_p0 <= r_V_fu_1003_p00(16 - 1 downto 0);
    r_V_fu_1003_p00 <= std_logic_vector(resize(unsigned(i_op_assign_s_reg_226),32));
    r_V_fu_1003_p1 <= rhs_V_1_cast_reg_1115(16 - 1 downto 0);
    r_V_mid1_fu_997_p0 <= rhs_V_1_cast_reg_1115(16 - 1 downto 0);
    r_V_mid1_fu_997_p1 <= r_V_mid1_fu_997_p10(16 - 1 downto 0);
    r_V_mid1_fu_997_p10 <= std_logic_vector(resize(unsigned(i_fu_545_p2),32));
    rhs_V_1_cast_fu_392_p1 <= std_logic_vector(resize(unsigned(grp_fu_370_p2),32));
    rhs_V_1_fu_396_p1 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_1067),32));
    rhs_V_2_cast_fu_416_p1 <= std_logic_vector(resize(unsigned(CHin_V_read_reg_1067),48));
    rhs_V_2_fu_404_p1 <= std_logic_vector(resize(unsigned(Win_V_read_reg_1056),48));
    rhs_V_7_cast_mid2_fu_529_p1 <= std_logic_vector(resize(unsigned(i_op_assign_17_cast6_mid2_v_fu_518_p3),48));
    rhs_V_fu_376_p1 <= std_logic_vector(resize(unsigned(Ky_V),16));
    sum_3_feature_in_load_2_fu_832_p3 <= 
        sum_3_reg_283 when (tmp_30_fu_826_p2(0) = '1') else 
        reg_340;
    sum_3_to_int7_fu_748_p1 <= sum_3_reg_283;
    sum_3_to_int_fu_841_p1 <= sum_3_reg_283;

    sum_4_phi_fu_297_p8_assign_proc : process(mode_V_read_reg_1045, sum_3_reg_283, sum_2_fu_321_p2, ap_reg_phiprechg_sum_4_reg_293pp0_it9, feature_in_load_1_sum_3_fu_925_p3, sum_3_feature_in_load_2_fu_832_p3, ap_sig_1219)
    begin
        if (ap_sig_1219) then
            if ((mode_V_read_reg_1045 = ap_const_lv2_2)) then 
                sum_4_phi_fu_297_p8 <= sum_3_feature_in_load_2_fu_832_p3;
            elsif ((mode_V_read_reg_1045 = ap_const_lv2_1)) then 
                sum_4_phi_fu_297_p8 <= feature_in_load_1_sum_3_fu_925_p3;
            elsif ((mode_V_read_reg_1045 = ap_const_lv2_3)) then 
                sum_4_phi_fu_297_p8 <= sum_3_reg_283;
            elsif ((mode_V_read_reg_1045 = ap_const_lv2_0)) then 
                sum_4_phi_fu_297_p8 <= sum_2_fu_321_p2;
            else 
                sum_4_phi_fu_297_p8 <= ap_reg_phiprechg_sum_4_reg_293pp0_it9;
            end if;
        else 
            sum_4_phi_fu_297_p8 <= ap_reg_phiprechg_sum_4_reg_293pp0_it9;
        end if; 
    end process;

    sum_fu_424_p3 <= 
        ap_const_lv32_0 when (tmp_6_fu_399_p2(0) = '1') else 
        ap_const_lv32_5BB1A2BC;
    tmp1_cast_fu_934_p1 <= std_logic_vector(resize(unsigned(grp_fu_1031_p3),48));
    tmp_10_fu_664_p1 <= std_logic_vector(resize(unsigned(i_op_assign_14_mid2_fu_615_p3),16));
    tmp_11_fu_1025_p1 <= rhs_V_reg_1090(8 - 1 downto 0);
    tmp_12_fu_551_p2 <= (exitcond_mid1_reg_1198 or exitcond_flatten2_reg_1188);
    tmp_13_fu_845_p4 <= sum_3_to_int_fu_841_p1(30 downto 23);
    tmp_14_fu_855_p1 <= sum_3_to_int_fu_841_p1(23 - 1 downto 0);
    tmp_15_fu_863_p4 <= feature_in_load_1_to_int_fu_859_p1(30 downto 23);
    tmp_16_fu_873_p1 <= feature_in_load_1_to_int_fu_859_p1(23 - 1 downto 0);
    tmp_17_cast_cast_fu_942_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_937_p2),49));
    tmp_17_fu_889_p2 <= (notrhs1_fu_883_p2 or notlhs1_fu_877_p2);
    tmp_18_fu_907_p2 <= (notrhs2_fu_901_p2 or notlhs2_fu_895_p2);
    tmp_19_fu_913_p2 <= (tmp_17_fu_889_p2 and tmp_18_fu_907_p2);
    tmp_1_mid1_fu_991_p0 <= rhs_V_reg_1090(8 - 1 downto 0);
    tmp_1_mid2_fu_570_p3 <= 
        tmp_1_mid1_fu_991_p2 when (exitcond_mid1_reg_1198(0) = '1') else 
        tmp_1_mid_fu_533_p3;
    tmp_1_mid_fu_533_p3 <= 
        ap_const_lv16_0 when (exitcond_flatten2_reg_1188(0) = '1') else 
        tmp_11_fu_1025_p2;
    tmp_21_fu_919_p2 <= (tmp_19_fu_913_p2 and grp_fu_335_p2);
    tmp_22_fu_752_p4 <= sum_3_to_int7_fu_748_p1(30 downto 23);
    tmp_23_fu_762_p1 <= sum_3_to_int7_fu_748_p1(23 - 1 downto 0);
    tmp_24_fu_770_p4 <= feature_in_load_2_to_int_fu_766_p1(30 downto 23);
    tmp_25_fu_780_p1 <= feature_in_load_2_to_int_fu_766_p1(23 - 1 downto 0);
    tmp_26_fu_796_p2 <= (notrhs_fu_790_p2 or notlhs_fu_784_p2);
    tmp_27_fu_814_p2 <= (notrhs9_fu_808_p2 or notlhs8_fu_802_p2);
    tmp_28_fu_820_p2 <= (tmp_26_fu_796_p2 and tmp_27_fu_814_p2);
    tmp_2_fu_432_p2 <= (tmp_6_fu_399_p2 or tmp_9_fu_419_p2);
    tmp_30_fu_826_p2 <= (tmp_28_fu_820_p2 and grp_fu_335_p2);
    tmp_32_cast_fu_389_p1 <= std_logic_vector(resize(unsigned(tmp_7_reg_1078),48));
    tmp_5_fu_986_p0 <= lhs_V_reg_1083(8 - 1 downto 0);
    tmp_6_fu_399_p2 <= "1" when (mode_V_read_reg_1045 = ap_const_lv2_0) else "0";
    tmp_7_cast_fu_386_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_1073),49));
    tmp_8_fu_937_p2 <= std_logic_vector(unsigned(r_V_1_mid2_reg_1233) + unsigned(tmp1_cast_fu_934_p1));
    tmp_9_fu_419_p2 <= "1" when (mode_V_read_reg_1045 = ap_const_lv2_1) else "0";
    tmp_s_fu_332_p0 <= std_logic_vector(resize(unsigned(r_V_15_fu_407_p2),32));
    w_V_fu_668_p2 <= std_logic_vector(unsigned(tmp_10_fu_664_p1) + unsigned(tmp_5_reg_1248));
end behav;
