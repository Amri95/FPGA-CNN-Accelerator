// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Conv,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.885800,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=26,HLS_SYN_FF=5568,HLS_SYN_LUT=4771,HLS_VERSION=2020_1}" *)

module Conv (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 109'd1;
parameter    ap_ST_fsm_state2 = 109'd2;
parameter    ap_ST_fsm_state3 = 109'd4;
parameter    ap_ST_fsm_state4 = 109'd8;
parameter    ap_ST_fsm_state5 = 109'd16;
parameter    ap_ST_fsm_state6 = 109'd32;
parameter    ap_ST_fsm_state7 = 109'd64;
parameter    ap_ST_fsm_state8 = 109'd128;
parameter    ap_ST_fsm_state9 = 109'd256;
parameter    ap_ST_fsm_state10 = 109'd512;
parameter    ap_ST_fsm_state11 = 109'd1024;
parameter    ap_ST_fsm_state12 = 109'd2048;
parameter    ap_ST_fsm_state13 = 109'd4096;
parameter    ap_ST_fsm_state14 = 109'd8192;
parameter    ap_ST_fsm_state15 = 109'd16384;
parameter    ap_ST_fsm_state16 = 109'd32768;
parameter    ap_ST_fsm_state17 = 109'd65536;
parameter    ap_ST_fsm_state18 = 109'd131072;
parameter    ap_ST_fsm_state19 = 109'd262144;
parameter    ap_ST_fsm_state20 = 109'd524288;
parameter    ap_ST_fsm_state21 = 109'd1048576;
parameter    ap_ST_fsm_state22 = 109'd2097152;
parameter    ap_ST_fsm_state23 = 109'd4194304;
parameter    ap_ST_fsm_state24 = 109'd8388608;
parameter    ap_ST_fsm_state25 = 109'd16777216;
parameter    ap_ST_fsm_state26 = 109'd33554432;
parameter    ap_ST_fsm_state27 = 109'd67108864;
parameter    ap_ST_fsm_state28 = 109'd134217728;
parameter    ap_ST_fsm_state29 = 109'd268435456;
parameter    ap_ST_fsm_state30 = 109'd536870912;
parameter    ap_ST_fsm_state31 = 109'd1073741824;
parameter    ap_ST_fsm_state32 = 109'd2147483648;
parameter    ap_ST_fsm_state33 = 109'd4294967296;
parameter    ap_ST_fsm_state34 = 109'd8589934592;
parameter    ap_ST_fsm_state35 = 109'd17179869184;
parameter    ap_ST_fsm_state36 = 109'd34359738368;
parameter    ap_ST_fsm_state37 = 109'd68719476736;
parameter    ap_ST_fsm_state38 = 109'd137438953472;
parameter    ap_ST_fsm_state39 = 109'd274877906944;
parameter    ap_ST_fsm_state40 = 109'd549755813888;
parameter    ap_ST_fsm_state41 = 109'd1099511627776;
parameter    ap_ST_fsm_state42 = 109'd2199023255552;
parameter    ap_ST_fsm_state43 = 109'd4398046511104;
parameter    ap_ST_fsm_state44 = 109'd8796093022208;
parameter    ap_ST_fsm_state45 = 109'd17592186044416;
parameter    ap_ST_fsm_state46 = 109'd35184372088832;
parameter    ap_ST_fsm_state47 = 109'd70368744177664;
parameter    ap_ST_fsm_state48 = 109'd140737488355328;
parameter    ap_ST_fsm_state49 = 109'd281474976710656;
parameter    ap_ST_fsm_state50 = 109'd562949953421312;
parameter    ap_ST_fsm_state51 = 109'd1125899906842624;
parameter    ap_ST_fsm_state52 = 109'd2251799813685248;
parameter    ap_ST_fsm_state53 = 109'd4503599627370496;
parameter    ap_ST_fsm_state54 = 109'd9007199254740992;
parameter    ap_ST_fsm_state55 = 109'd18014398509481984;
parameter    ap_ST_fsm_state56 = 109'd36028797018963968;
parameter    ap_ST_fsm_state57 = 109'd72057594037927936;
parameter    ap_ST_fsm_state58 = 109'd144115188075855872;
parameter    ap_ST_fsm_state59 = 109'd288230376151711744;
parameter    ap_ST_fsm_state60 = 109'd576460752303423488;
parameter    ap_ST_fsm_state61 = 109'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 109'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 109'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 109'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 109'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 109'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 109'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 109'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 109'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 109'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 109'd1180591620717411303424;
parameter    ap_ST_fsm_pp0_stage0 = 109'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage1 = 109'd4722366482869645213696;
parameter    ap_ST_fsm_pp0_stage2 = 109'd9444732965739290427392;
parameter    ap_ST_fsm_pp0_stage3 = 109'd18889465931478580854784;
parameter    ap_ST_fsm_pp0_stage4 = 109'd37778931862957161709568;
parameter    ap_ST_fsm_pp0_stage5 = 109'd75557863725914323419136;
parameter    ap_ST_fsm_pp0_stage6 = 109'd151115727451828646838272;
parameter    ap_ST_fsm_pp0_stage7 = 109'd302231454903657293676544;
parameter    ap_ST_fsm_pp0_stage8 = 109'd604462909807314587353088;
parameter    ap_ST_fsm_state97 = 109'd1208925819614629174706176;
parameter    ap_ST_fsm_state98 = 109'd2417851639229258349412352;
parameter    ap_ST_fsm_state99 = 109'd4835703278458516698824704;
parameter    ap_ST_fsm_state100 = 109'd9671406556917033397649408;
parameter    ap_ST_fsm_state101 = 109'd19342813113834066795298816;
parameter    ap_ST_fsm_state102 = 109'd38685626227668133590597632;
parameter    ap_ST_fsm_state103 = 109'd77371252455336267181195264;
parameter    ap_ST_fsm_state104 = 109'd154742504910672534362390528;
parameter    ap_ST_fsm_state105 = 109'd309485009821345068724781056;
parameter    ap_ST_fsm_state106 = 109'd618970019642690137449562112;
parameter    ap_ST_fsm_state107 = 109'd1237940039285380274899124224;
parameter    ap_ST_fsm_state108 = 109'd2475880078570760549798248448;
parameter    ap_ST_fsm_state109 = 109'd4951760157141521099596496896;
parameter    ap_ST_fsm_state110 = 109'd9903520314283042199192993792;
parameter    ap_ST_fsm_state111 = 109'd19807040628566084398385987584;
parameter    ap_ST_fsm_state112 = 109'd39614081257132168796771975168;
parameter    ap_ST_fsm_state113 = 109'd79228162514264337593543950336;
parameter    ap_ST_fsm_state114 = 109'd158456325028528675187087900672;
parameter    ap_ST_fsm_state115 = 109'd316912650057057350374175801344;
parameter    ap_ST_fsm_state116 = 109'd633825300114114700748351602688;
parameter    ap_ST_fsm_state117 = 109'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state118 = 109'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state119 = 109'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state120 = 109'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state121 = 109'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state122 = 109'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state123 = 109'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state124 = 109'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state125 = 109'd324518553658426726783156020576256;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [108:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [15:0] CHout_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [7:0] Sx_V;
wire   [7:0] Sy_V;
wire   [0:0] mode_V;
wire   [0:0] relu_en_V;
wire   [31:0] feature_in;
wire   [31:0] W;
wire   [31:0] bias;
wire   [31:0] feature_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln58_reg_1936;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln58_reg_1936_pp0_iter1_reg;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state106;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state119;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state120;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state125;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [15:0] i_op_assign_reg_412;
reg   [31:0] ret_V_8_reg_424;
reg   [31:0] sum_2_reg_435;
reg   [0:0] relu_en_V_read_reg_1370;
reg   [0:0] mode_V_read_reg_1375;
reg   [7:0] Sy_V_read_reg_1381;
reg   [7:0] Sx_V_read_reg_1387;
reg   [7:0] Ky_V_read_reg_1393;
reg   [7:0] Kx_V_read_reg_1399;
reg   [15:0] CHout_V_read_reg_1406;
reg   [15:0] Win_V_read_reg_1412;
reg   [15:0] Hin_V_read_reg_1418;
reg   [15:0] CHin_V_read_reg_1423;
reg   [29:0] tmp_1_reg_1430;
reg   [29:0] tmp_2_reg_1435;
reg   [29:0] tmp_4_reg_1440;
reg   [29:0] tmp_9_reg_1445;
wire   [8:0] zext_ln1371_fu_517_p1;
reg   [8:0] zext_ln1371_reg_1450;
reg   [7:0] trunc_ln1371_1_reg_1455;
wire   [8:0] zext_ln1371_1_fu_537_p1;
reg   [8:0] zext_ln1371_1_reg_1460;
reg   [7:0] trunc_ln1371_4_reg_1465;
wire   [7:0] select_ln29_fu_629_p3;
reg   [7:0] select_ln29_reg_1470;
wire    ap_CS_fsm_state2;
wire   [7:0] select_ln29_1_fu_636_p3;
reg   [7:0] select_ln29_1_reg_1476;
wire   [16:0] zext_ln1371_4_fu_654_p1;
reg   [16:0] zext_ln1371_4_reg_1482;
wire    ap_CS_fsm_state3;
wire   [17:0] sub_ln1371_4_fu_670_p2;
reg   [17:0] sub_ln1371_4_reg_1487;
wire   [16:0] zext_ln1371_9_fu_687_p1;
reg   [16:0] zext_ln1371_9_reg_1492;
wire   [17:0] sub_ln1371_5_fu_703_p2;
reg   [17:0] sub_ln1371_5_reg_1498;
wire    ap_CS_fsm_state4;
wire   [15:0] grp_fu_715_p2;
reg   [15:0] sdiv_ln1371_reg_1523;
wire    ap_CS_fsm_state26;
wire   [15:0] grp_fu_727_p2;
reg   [15:0] sdiv_ln1371_1_reg_1528;
wire   [15:0] Wout_V_fu_736_p2;
reg   [15:0] Wout_V_reg_1533;
wire    ap_CS_fsm_state27;
wire   [15:0] add_ln41_fu_745_p2;
reg   [15:0] add_ln41_reg_1540;
wire   [31:0] rhs_V_1_cast_fu_751_p1;
reg   [31:0] rhs_V_1_cast_reg_1545;
wire    ap_CS_fsm_state28;
wire   [31:0] grp_fu_1312_p2;
reg   [31:0] bound4_reg_1557;
wire    ap_CS_fsm_state30;
wire   [47:0] rhs_V_11_cast3_fu_757_p1;
reg   [47:0] rhs_V_11_cast3_reg_1563;
wire    ap_CS_fsm_state31;
wire   [48:0] p_cast29_fu_769_p1;
reg   [48:0] p_cast29_reg_1576;
wire    ap_CS_fsm_state35;
wire   [30:0] p_cast28_fu_772_p1;
reg   [30:0] p_cast28_reg_1581;
wire   [48:0] p_cast27_fu_775_p1;
reg   [48:0] p_cast27_reg_1586;
wire   [47:0] p_cast_fu_778_p1;
reg   [47:0] p_cast_reg_1591;
wire   [15:0] zext_ln68_fu_781_p1;
reg   [15:0] zext_ln68_reg_1596;
wire   [15:0] zext_ln68_1_fu_784_p1;
reg   [15:0] zext_ln68_1_reg_1601;
wire   [31:0] rhs_V_1_fu_787_p1;
reg   [31:0] rhs_V_1_reg_1606;
wire   [15:0] zext_ln68_2_fu_790_p1;
reg   [15:0] zext_ln68_2_reg_1613;
wire   [15:0] zext_ln68_3_fu_793_p1;
reg   [15:0] zext_ln68_3_reg_1619;
wire   [47:0] rhs_V_2_fu_796_p1;
reg   [47:0] rhs_V_2_reg_1624;
wire   [15:0] zext_ln215_1_fu_799_p1;
reg   [15:0] zext_ln215_1_reg_1629;
wire   [23:0] zext_ln215_2_fu_802_p1;
reg   [23:0] zext_ln215_2_reg_1634;
wire   [31:0] zext_ln41_fu_805_p1;
reg   [31:0] zext_ln41_reg_1639;
wire   [15:0] bound_fu_811_p2;
reg   [15:0] bound_reg_1645;
wire   [47:0] grp_fu_763_p2;
reg   [47:0] bound13_reg_1650;
wire   [0:0] icmp_ln45_fu_817_p2;
reg   [0:0] icmp_ln45_reg_1655;
wire    ap_CS_fsm_state36;
wire   [0:0] icmp_ln41_fu_826_p2;
reg   [0:0] icmp_ln41_reg_1665;
wire   [47:0] add_ln41_1_fu_831_p2;
reg   [47:0] add_ln41_1_reg_1669;
wire   [31:0] grp_fu_1318_p2;
reg   [31:0] ret_V_1_reg_1674;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire   [47:0] grp_fu_840_p2;
reg   [47:0] ret_V_2_reg_1684;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln43_fu_845_p2;
reg   [0:0] icmp_ln43_reg_1689;
wire   [0:0] select_ln1598_4_fu_855_p3;
reg   [0:0] select_ln1598_4_reg_1699;
(* use_dsp48 = "no" *) wire  signed [15:0] i_fu_869_p2;
reg  signed [15:0] i_reg_1707;
wire    ap_CS_fsm_state44;
wire  signed [15:0] select_ln1598_5_fu_879_p3;
reg  signed [15:0] select_ln1598_5_reg_1713;
wire   [15:0] select_ln43_fu_887_p3;
reg   [15:0] select_ln43_reg_1720;
wire    ap_CS_fsm_state45;
wire  signed [15:0] grp_fu_1323_p3;
reg  signed [15:0] sub_ln68_reg_1730;
wire    ap_CS_fsm_state46;
wire  signed [15:0] grp_fu_1329_p2;
reg  signed [15:0] mul_ln68_reg_1735;
wire    ap_CS_fsm_state47;
wire   [31:0] grp_fu_1334_p2;
reg   [31:0] mul_ln1352_2_reg_1740;
wire  signed [15:0] grp_fu_1339_p2;
reg  signed [15:0] mul_ln68_2_reg_1745;
wire    ap_CS_fsm_state48;
wire   [15:0] sub_ln1598_fu_912_p2;
reg   [15:0] sub_ln1598_reg_1755;
wire   [47:0] grp_fu_917_p2;
reg   [47:0] mul_ln1352_3_reg_1761;
wire    ap_CS_fsm_state52;
wire   [15:0] select_ln1598_1_fu_928_p3;
reg   [15:0] select_ln1598_1_reg_1766;
wire    ap_CS_fsm_state53;
wire   [30:0] zext_ln1598_2_fu_935_p1;
reg   [30:0] zext_ln1598_2_reg_1771;
wire   [31:0] zext_ln1598_3_fu_939_p1;
reg   [31:0] zext_ln1598_3_reg_1776;
wire   [47:0] select_ln1598_7_fu_949_p3;
reg   [47:0] select_ln1598_7_reg_1782;
wire   [31:0] zext_ln1598_1_fu_955_p1;
reg   [31:0] zext_ln1598_1_reg_1787;
wire  signed [15:0] h_V_fu_962_p2;
reg  signed [15:0] h_V_reg_1792;
wire    ap_CS_fsm_state54;
wire   [0:0] icmp_ln49_fu_967_p2;
reg   [0:0] icmp_ln49_reg_1798;
wire   [15:0] add_ln49_fu_972_p2;
reg   [15:0] add_ln49_reg_1802;
wire   [0:0] xor_ln55_fu_986_p2;
reg   [0:0] xor_ln55_reg_1807;
wire    ap_CS_fsm_state55;
wire   [0:0] icmp_ln51_fu_992_p2;
reg   [0:0] icmp_ln51_reg_1812;
wire  signed [15:0] add_ln68_1_fu_1007_p2;
reg  signed [15:0] add_ln68_1_reg_1819;
wire   [7:0] select_ln1598_10_fu_1012_p3;
reg   [7:0] select_ln1598_10_reg_1825;
wire   [30:0] add_ln72_fu_1020_p2;
reg   [30:0] add_ln72_reg_1831;
wire   [15:0] j_fu_1024_p2;
reg   [15:0] j_reg_1836;
wire   [31:0] select_ln43_1_fu_1035_p3;
reg   [31:0] select_ln43_1_reg_1841;
wire   [7:0] select_ln1598_8_fu_1042_p3;
reg   [7:0] select_ln1598_8_reg_1846;
wire    ap_CS_fsm_state56;
wire  signed [15:0] select_ln1598_9_fu_1049_p3;
reg  signed [15:0] select_ln1598_9_reg_1852;
wire   [15:0] mul_ln1598_2_fu_1060_p2;
reg   [15:0] mul_ln1598_2_reg_1857;
(* use_dsp48 = "no" *) wire  signed [15:0] w_V_fu_1086_p2;
reg  signed [15:0] w_V_reg_1862;
wire   [0:0] or_ln55_1_fu_1105_p2;
reg   [0:0] or_ln55_1_reg_1868;
wire    ap_CS_fsm_state57;
wire  signed [31:0] grp_fu_1348_p2;
reg  signed [31:0] mul_ln1598_reg_1877;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state62;
wire   [47:0] grp_fu_1117_p2;
reg   [47:0] mul_ln1598_1_reg_1892;
wire    ap_CS_fsm_state64;
wire   [31:0] grp_fu_1353_p2;
reg   [31:0] mul_ln1598_3_reg_1897;
wire   [0:0] icmp_ln887_fu_1131_p2;
reg   [0:0] icmp_ln887_reg_1907;
wire  signed [47:0] grp_fu_1358_p3;
reg  signed [47:0] ret_V_5_reg_1916;
wire    ap_CS_fsm_state66;
wire   [31:0] grp_fu_1364_p3;
reg   [31:0] tmp_reg_1921;
wire    ap_CS_fsm_state67;
wire   [47:0] grp_fu_1142_p2;
reg   [47:0] tmp1645_reg_1931;
wire    ap_CS_fsm_state71;
wire   [0:0] icmp_ln58_fu_1147_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state72_pp0_stage0_iter0;
wire    ap_block_state81_pp0_stage0_iter1;
wire    ap_block_state90_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln58_reg_1936_pp0_iter2_reg;
reg   [31:0] gmem_addr_2_reg_1940;
wire   [31:0] add_ln1352_fu_1176_p2;
reg   [31:0] add_ln1352_reg_1946;
wire   [31:0] add_ln544_2_fu_1181_p2;
reg   [31:0] add_ln544_2_reg_1951;
wire   [47:0] add_ln544_3_fu_1189_p2;
reg   [47:0] add_ln544_3_reg_1956;
wire    ap_block_state73_pp0_stage1_iter0;
reg    ap_block_state73_io;
reg    ap_block_state82_pp0_stage1_iter1;
wire    ap_block_state91_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] gmem_addr_3_reg_1961;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state74_pp0_stage2_iter0;
wire    ap_block_state83_pp0_stage2_iter1;
wire    ap_block_state92_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [15:0] cin_fu_1212_p2;
reg   [15:0] cin_reg_1967;
reg    ap_block_state80_pp0_stage8_iter0;
wire    ap_block_state89_pp0_stage8_iter1;
reg    ap_block_pp0_stage8_11001;
reg   [31:0] gmem_addr_2_read_reg_1972;
reg   [31:0] gmem_addr_3_read_reg_1977;
wire   [31:0] grp_fu_468_p2;
reg   [31:0] tp_reg_1982;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state78_pp0_stage6_iter0;
wire    ap_block_state87_pp0_stage6_iter1;
wire    ap_block_state96_pp0_stage6_iter2;
wire    ap_block_pp0_stage6_11001;
wire   [31:0] grp_fu_462_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [7:0] jj_fu_1218_p2;
reg   [7:0] jj_reg_1992;
wire    ap_CS_fsm_state97;
wire   [31:0] grp_fu_1343_p3;
reg   [31:0] add_ln544_reg_2003;
wire    ap_CS_fsm_state100;
wire   [47:0] add_ln544_1_fu_1236_p2;
reg   [47:0] add_ln544_1_reg_2008;
wire    ap_CS_fsm_state101;
reg   [31:0] gmem_addr_1_reg_2013;
wire    ap_CS_fsm_state102;
reg   [31:0] gmem_addr_read_reg_2019;
reg   [31:0] sum_reg_2024;
wire    ap_CS_fsm_state115;
wire   [31:0] select_ln73_fu_1305_p3;
reg   [31:0] select_ln73_reg_2031;
reg    ap_block_pp0_stage8_subdone;
wire    ap_block_state79_pp0_stage7_iter0;
wire    ap_block_state88_pp0_stage7_iter1;
wire    ap_block_pp0_stage7_subdone;
wire    ap_CS_fsm_pp0_stage7;
reg    ap_condition_pp0_exit_iter1_state88;
reg   [47:0] indvar_flatten32_reg_306;
reg  signed [15:0] i_op_assign_16_reg_317;
reg   [15:0] i_op_assign_15_reg_329;
reg   [31:0] indvar_flatten7_reg_341;
reg   [15:0] i_op_assign_17_reg_353;
reg   [15:0] indvar_flatten_reg_365;
wire    ap_CS_fsm_state98;
reg   [7:0] i_op_assign_18_reg_376;
reg   [7:0] i_op_assign_19_reg_388;
reg   [31:0] sum_1_reg_400;
reg   [15:0] ap_phi_mux_i_op_assign_phi_fu_416_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_ret_V_8_phi_fu_428_p4;
reg   [31:0] sum_3_reg_446;
wire  signed [63:0] sext_ln66_fu_1166_p1;
wire   [63:0] zext_ln66_1_fu_1202_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln72_fu_1223_p1;
wire   [63:0] zext_ln76_1_fu_1249_p1;
wire    ap_block_state75_pp0_stage3_iter0;
reg    ap_block_state75_io;
wire    ap_block_state84_pp0_stage3_iter1;
wire    ap_block_state93_pp0_stage3_iter2;
reg    ap_block_pp0_stage3_11001;
reg   [31:0] grp_fu_462_p0;
reg   [31:0] grp_fu_462_p1;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state116;
wire   [8:0] sub_ln1371_fu_521_p2;
wire   [8:0] sub_ln1371_2_fu_541_p2;
wire   [8:0] add_ln1371_fu_557_p2;
wire   [0:0] tmp_10_fu_562_p3;
wire   [7:0] sub_ln1371_1_fu_580_p2;
wire   [7:0] trunc_ln1371_2_fu_570_p4;
wire   [8:0] add_ln1371_1_fu_593_p2;
wire   [0:0] tmp_11_fu_598_p3;
wire   [7:0] sub_ln1371_3_fu_616_p2;
wire   [7:0] trunc_ln1371_5_fu_606_p4;
wire   [7:0] pad_x_V_fu_585_p3;
wire   [7:0] pad_y_V_fu_621_p3;
wire   [8:0] shl_ln_fu_643_p3;
wire   [16:0] zext_ln1371_2_fu_650_p1;
wire   [16:0] add_ln1371_2_fu_657_p2;
wire   [17:0] zext_ln1371_5_fu_663_p1;
wire   [17:0] zext_ln1371_6_fu_667_p1;
wire   [8:0] shl_ln1371_1_fu_676_p3;
wire   [16:0] zext_ln1371_8_fu_683_p1;
wire   [16:0] add_ln1371_3_fu_690_p2;
wire   [17:0] zext_ln1371_10_fu_696_p1;
wire   [17:0] zext_ln1371_11_fu_700_p1;
wire  signed [18:0] grp_fu_715_p0;
wire   [8:0] grp_fu_715_p1;
wire  signed [18:0] grp_fu_727_p0;
wire   [8:0] grp_fu_727_p1;
wire   [15:0] trunc_ln214_fu_733_p1;
wire   [15:0] empty_fu_742_p1;
wire   [15:0] grp_fu_763_p0;
wire   [31:0] grp_fu_763_p1;
wire   [7:0] bound_fu_811_p0;
wire   [7:0] bound_fu_811_p1;
wire   [31:0] grp_fu_840_p0;
wire   [15:0] grp_fu_840_p1;
wire   [0:0] icmp_ln45_1_fu_850_p2;
wire   [15:0] select_ln1598_fu_862_p3;
wire   [0:0] or_ln1598_fu_875_p2;
wire   [15:0] select_ln1598_2_fu_897_p3;
wire   [15:0] select_ln1598_6_fu_906_p3;
wire   [31:0] grp_fu_917_p0;
wire   [15:0] grp_fu_917_p1;
wire   [15:0] add_ln41_2_fu_922_p2;
wire   [47:0] select_ln1598_3_fu_943_p3;
wire   [15:0] zext_ln68_4_fu_958_p1;
wire  signed [16:0] sext_ln1352_fu_978_p1;
wire   [0:0] icmp_ln55_fu_981_p2;
wire   [7:0] add_ln49_1_fu_997_p2;
wire   [15:0] zext_ln68_5_fu_1003_p1;
wire   [31:0] add_ln43_1_fu_1029_p2;
wire   [7:0] mul_ln1598_2_fu_1060_p0;
wire   [7:0] mul_ln1598_2_fu_1060_p1;
wire  signed [16:0] sext_ln1352_1_fu_1054_p1;
wire   [0:0] icmp_ln55_1_fu_1065_p2;
wire   [0:0] xor_ln55_1_fu_1070_p2;
wire   [15:0] zext_ln68_6_fu_1082_p1;
wire   [15:0] or_ln55_fu_1091_p2;
wire   [0:0] tmp_12_fu_1097_p3;
wire   [0:0] select_ln1598_11_fu_1076_p3;
wire   [15:0] grp_fu_1117_p0;
wire  signed [16:0] sext_ln887_1_fu_1128_p1;
wire   [31:0] grp_fu_1142_p0;
wire   [15:0] grp_fu_1142_p1;
wire   [47:0] zext_ln215_fu_1152_p1;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_6_fu_1156_p2;
wire   [47:0] add_ln66_fu_1161_p2;
wire   [47:0] zext_ln544_1_fu_1186_p1;
wire   [48:0] zext_ln66_fu_1194_p1;
wire   [48:0] add_ln66_1_fu_1197_p2;
wire   [47:0] zext_ln544_fu_1233_p1;
wire   [48:0] zext_ln76_fu_1241_p1;
wire   [48:0] add_ln76_fu_1244_p2;
wire   [31:0] bitcast_ln73_fu_1259_p1;
wire   [7:0] tmp_7_fu_1262_p4;
wire   [22:0] trunc_ln73_fu_1272_p1;
wire   [0:0] icmp_ln73_1_fu_1282_p2;
wire   [0:0] icmp_ln73_fu_1276_p2;
wire   [0:0] or_ln73_fu_1288_p2;
wire   [0:0] grp_fu_472_p2;
wire   [0:0] rhs_V_fu_1294_p2;
wire   [0:0] ret_V_fu_1300_p2;
wire   [15:0] grp_fu_1312_p0;
wire   [15:0] grp_fu_1312_p1;
wire   [15:0] grp_fu_1318_p0;
wire   [15:0] grp_fu_1318_p1;
wire  signed [15:0] grp_fu_1323_p0;
wire   [7:0] grp_fu_1323_p1;
wire   [7:0] grp_fu_1323_p2;
wire   [7:0] grp_fu_1329_p0;
wire   [15:0] grp_fu_1334_p0;
wire   [15:0] grp_fu_1334_p1;
wire   [7:0] grp_fu_1339_p1;
wire   [15:0] grp_fu_1343_p0;
wire   [15:0] grp_fu_1343_p1;
wire   [15:0] grp_fu_1343_p2;
wire   [15:0] grp_fu_1348_p0;
wire   [15:0] grp_fu_1353_p0;
wire   [15:0] grp_fu_1353_p1;
wire   [15:0] grp_fu_1358_p1;
wire   [7:0] grp_fu_1364_p0;
wire   [15:0] grp_fu_1364_p1;
reg    grp_fu_462_ce;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_state76_pp0_stage4_iter0;
wire    ap_block_state85_pp0_stage4_iter1;
wire    ap_block_state94_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state77_pp0_stage5_iter0;
wire    ap_block_state86_pp0_stage5_iter1;
wire    ap_block_state95_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state114;
reg    grp_fu_468_ce;
reg    grp_fu_472_ce;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state118;
reg    grp_fu_715_ap_start;
wire    grp_fu_715_ap_done;
reg    grp_fu_727_ap_start;
wire    grp_fu_727_ap_done;
reg    grp_fu_1343_ce;
reg   [108:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] bound_fu_811_p00;
wire   [15:0] bound_fu_811_p10;
wire   [47:0] grp_fu_1142_p00;
wire   [31:0] grp_fu_1312_p00;
wire   [31:0] grp_fu_1312_p10;
wire   [31:0] grp_fu_1318_p00;
wire   [31:0] grp_fu_1334_p00;
wire   [31:0] grp_fu_1353_p10;
wire   [23:0] grp_fu_1364_p00;
wire   [18:0] grp_fu_715_p10;
wire   [18:0] grp_fu_727_p10;
wire   [47:0] grp_fu_763_p00;
wire   [47:0] grp_fu_763_p10;
wire   [47:0] grp_fu_840_p00;
wire   [47:0] grp_fu_917_p00;
wire   [15:0] mul_ln1598_2_fu_1060_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 109'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

Conv_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Conv_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .CHout_V(CHout_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .Sx_V(Sx_V),
    .Sy_V(Sy_V),
    .mode_V(mode_V),
    .relu_en_V(relu_en_V),
    .feature_in(feature_in),
    .W(W),
    .bias(bias),
    .feature_out(feature_out)
);

Conv_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Conv_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_2013),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(select_ln73_reg_2031),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_462_p0),
    .din1(grp_fu_462_p1),
    .ce(grp_fu_462_ce),
    .dout(grp_fu_462_p2)
);

Conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_2_read_reg_1972),
    .din1(gmem_addr_3_read_reg_1977),
    .ce(grp_fu_468_ce),
    .dout(grp_fu_468_p2)
);

Conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_reg_2024),
    .din1(32'd0),
    .ce(grp_fu_472_ce),
    .opcode(5'd4),
    .dout(grp_fu_472_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_715_ap_start),
    .done(grp_fu_715_ap_done),
    .din0(grp_fu_715_p0),
    .din1(grp_fu_715_p1),
    .ce(1'b1),
    .dout(grp_fu_715_p2)
);

Conv_sdiv_19s_9nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 23 ),
    .din0_WIDTH( 19 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
Conv_sdiv_19s_9nseOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_727_ap_start),
    .done(grp_fu_727_ap_done),
    .din0(grp_fu_727_p0),
    .din1(grp_fu_727_p1),
    .ce(1'b1),
    .dout(grp_fu_727_p2)
);

Conv_mul_16ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
Conv_mul_16ns_32nfYi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_763_p0),
    .din1(grp_fu_763_p1),
    .ce(1'b1),
    .dout(grp_fu_763_p2)
);

Conv_mul_32ns_16ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
Conv_mul_32ns_16ng8j_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_840_p0),
    .din1(grp_fu_840_p1),
    .ce(1'b1),
    .dout(grp_fu_840_p2)
);

Conv_mul_32ns_16ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
Conv_mul_32ns_16ng8j_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_917_p0),
    .din1(grp_fu_917_p1),
    .ce(1'b1),
    .dout(grp_fu_917_p2)
);

Conv_mul_16ns_32shbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
Conv_mul_16ns_32shbi_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1117_p0),
    .din1(mul_ln1598_reg_1877),
    .ce(1'b1),
    .dout(grp_fu_1117_p2)
);

Conv_mul_32ns_16ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
Conv_mul_32ns_16ng8j_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1142_p0),
    .din1(grp_fu_1142_p1),
    .ce(1'b1),
    .dout(grp_fu_1142_p2)
);

Conv_mul_mul_16nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsibs_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1312_p0),
    .din1(grp_fu_1312_p1),
    .ce(1'b1),
    .dout(grp_fu_1312_p2)
);

Conv_mul_mul_16nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsibs_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1318_p0),
    .din1(grp_fu_1318_p1),
    .ce(1'b1),
    .dout(grp_fu_1318_p2)
);

Conv_mac_mul_sub_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Conv_mac_mul_sub_jbC_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1323_p0),
    .din1(grp_fu_1323_p1),
    .din2(grp_fu_1323_p2),
    .ce(1'b1),
    .dout(grp_fu_1323_p3)
);

Conv_mul_mul_8ns_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
Conv_mul_mul_8ns_kbM_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1329_p0),
    .din1(i_op_assign_16_reg_317),
    .ce(1'b1),
    .dout(grp_fu_1329_p2)
);

Conv_mul_mul_16nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsibs_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1334_p0),
    .din1(grp_fu_1334_p1),
    .ce(1'b1),
    .dout(grp_fu_1334_p2)
);

Conv_mul_mul_16s_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Conv_mul_mul_16s_lbW_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_reg_1707),
    .din1(grp_fu_1339_p1),
    .ce(1'b1),
    .dout(grp_fu_1339_p2)
);

Conv_mac_muladd_1mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mac_muladd_1mb6_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1343_p0),
    .din1(grp_fu_1343_p1),
    .din2(grp_fu_1343_p2),
    .ce(grp_fu_1343_ce),
    .dout(grp_fu_1343_p3)
);

Conv_mul_mul_16nsncg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsncg_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1348_p0),
    .din1(select_ln1598_9_reg_1852),
    .ce(1'b1),
    .dout(grp_fu_1348_p2)
);

Conv_mul_mul_16nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Conv_mul_mul_16nsibs_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1353_p0),
    .din1(grp_fu_1353_p1),
    .ce(1'b1),
    .dout(grp_fu_1353_p2)
);

Conv_mac_muladd_1ocq #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Conv_mac_muladd_1ocq_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w_V_reg_1862),
    .din1(grp_fu_1358_p1),
    .din2(mul_ln1598_1_reg_1892),
    .ce(1'b1),
    .dout(grp_fu_1358_p3)
);

Conv_mac_muladd_8pcA #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Conv_mac_muladd_8pcA_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1364_p0),
    .din1(grp_fu_1364_p1),
    .din2(mul_ln1598_3_reg_1897),
    .ce(1'b1),
    .dout(grp_fu_1364_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage8_subdone) & (icmp_ln58_reg_1936 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state71)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state71) | ((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state88) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter1_state88) & (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8))))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state71)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state125))) begin
        i_op_assign_15_reg_329 <= select_ln1598_1_reg_1766;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        i_op_assign_15_reg_329 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state125))) begin
        i_op_assign_16_reg_317 <= select_ln43_reg_1720;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        i_op_assign_16_reg_317 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state125))) begin
        i_op_assign_17_reg_353 <= j_reg_1836;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        i_op_assign_17_reg_353 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        i_op_assign_18_reg_376 <= select_ln1598_10_reg_1825;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        i_op_assign_18_reg_376 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        i_op_assign_19_reg_388 <= jj_reg_1992;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        i_op_assign_19_reg_388 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        i_op_assign_reg_412 <= 16'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_op_assign_reg_412 <= cin_reg_1967;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state125))) begin
        indvar_flatten32_reg_306 <= add_ln41_1_reg_1669;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        indvar_flatten32_reg_306 <= 48'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state125))) begin
        indvar_flatten7_reg_341 <= select_ln43_1_reg_1841;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        indvar_flatten7_reg_341 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        indvar_flatten_reg_365 <= add_ln49_reg_1802;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        indvar_flatten_reg_365 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        ret_V_8_reg_424 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ret_V_8_reg_424 <= add_ln1352_reg_1946;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        sum_1_reg_400 <= sum_3_reg_446;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        sum_1_reg_400 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        sum_2_reg_435 <= sum_1_reg_400;
    end else if (((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln58_reg_1936_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        sum_2_reg_435 <= grp_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_reg_1907 == 1'd1) & (or_ln55_1_reg_1868 == 1'd0) & (1'b1 == ap_CS_fsm_state97))) begin
        sum_3_reg_446 <= sum_2_reg_435;
    end else if ((((or_ln55_1_reg_1868 == 1'd1) & (1'b1 == ap_CS_fsm_state64)) | ((icmp_ln887_fu_1131_p2 == 1'd0) & (or_ln55_1_reg_1868 == 1'd0) & (1'b1 == ap_CS_fsm_state64)))) begin
        sum_3_reg_446 <= sum_1_reg_400;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        CHin_V_read_reg_1423 <= CHin_V;
        CHout_V_read_reg_1406 <= CHout_V;
        Hin_V_read_reg_1418 <= Hin_V;
        Kx_V_read_reg_1399 <= Kx_V;
        Ky_V_read_reg_1393 <= Ky_V;
        Sx_V_read_reg_1387 <= Sx_V;
        Sy_V_read_reg_1381 <= Sy_V;
        Win_V_read_reg_1412 <= Win_V;
        mode_V_read_reg_1375 <= mode_V;
        relu_en_V_read_reg_1370 <= relu_en_V;
        tmp_1_reg_1430 <= {{feature_out[31:2]}};
        tmp_2_reg_1435 <= {{bias[31:2]}};
        tmp_4_reg_1440 <= {{W[31:2]}};
        tmp_9_reg_1445 <= {{feature_in[31:2]}};
        trunc_ln1371_1_reg_1455 <= {{sub_ln1371_fu_521_p2[8:1]}};
        trunc_ln1371_4_reg_1465 <= {{sub_ln1371_2_fu_541_p2[8:1]}};
        zext_ln1371_1_reg_1460[7 : 0] <= zext_ln1371_1_fu_537_p1[7 : 0];
        zext_ln1371_reg_1450[7 : 0] <= zext_ln1371_fu_517_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        Wout_V_reg_1533 <= Wout_V_fu_736_p2;
        add_ln41_reg_1540 <= add_ln41_fu_745_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_fu_1147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln1352_reg_1946 <= add_ln1352_fu_1176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        add_ln41_1_reg_1669 <= add_ln41_1_fu_831_p2;
        icmp_ln41_reg_1665 <= icmp_ln41_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        add_ln49_reg_1802 <= add_ln49_fu_972_p2;
        h_V_reg_1792 <= h_V_fu_962_p2;
        icmp_ln49_reg_1798 <= icmp_ln49_fu_967_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        add_ln544_1_reg_2008 <= add_ln544_1_fu_1236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_fu_1147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln544_2_reg_1951 <= add_ln544_2_fu_1181_p2;
        gmem_addr_2_reg_1940 <= sext_ln66_fu_1166_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln544_3_reg_1956 <= add_ln544_3_fu_1189_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        add_ln544_reg_2003 <= grp_fu_1343_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_1798 == 1'd0) & (1'b1 == ap_CS_fsm_state55))) begin
        add_ln68_1_reg_1819 <= add_ln68_1_fu_1007_p2;
        icmp_ln51_reg_1812 <= icmp_ln51_fu_992_p2;
        select_ln1598_10_reg_1825 <= select_ln1598_10_fu_1012_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_1798 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
        add_ln72_reg_1831 <= add_ln72_fu_1020_p2;
        j_reg_1836 <= j_fu_1024_p2;
        select_ln43_1_reg_1841 <= select_ln43_1_fu_1035_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        bound13_reg_1650 <= grp_fu_763_p2;
        bound_reg_1645 <= bound_fu_811_p2;
        icmp_ln45_reg_1655 <= icmp_ln45_fu_817_p2;
        p_cast27_reg_1586[29 : 0] <= p_cast27_fu_775_p1[29 : 0];
        p_cast28_reg_1581[29 : 0] <= p_cast28_fu_772_p1[29 : 0];
        p_cast29_reg_1576[29 : 0] <= p_cast29_fu_769_p1[29 : 0];
        p_cast_reg_1591[29 : 0] <= p_cast_fu_778_p1[29 : 0];
        rhs_V_1_reg_1606[15 : 0] <= rhs_V_1_fu_787_p1[15 : 0];
        rhs_V_2_reg_1624[15 : 0] <= rhs_V_2_fu_796_p1[15 : 0];
        zext_ln215_1_reg_1629[7 : 0] <= zext_ln215_1_fu_799_p1[7 : 0];
        zext_ln215_2_reg_1634[15 : 0] <= zext_ln215_2_fu_802_p1[15 : 0];
        zext_ln41_reg_1639[15 : 0] <= zext_ln41_fu_805_p1[15 : 0];
        zext_ln68_1_reg_1601[7 : 0] <= zext_ln68_1_fu_784_p1[7 : 0];
        zext_ln68_2_reg_1613[7 : 0] <= zext_ln68_2_fu_790_p1[7 : 0];
        zext_ln68_3_reg_1619[7 : 0] <= zext_ln68_3_fu_793_p1[7 : 0];
        zext_ln68_reg_1596[7 : 0] <= zext_ln68_fu_781_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        bound4_reg_1557 <= grp_fu_1312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        cin_reg_1967 <= cin_fu_1212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        gmem_addr_1_reg_2013 <= zext_ln76_1_fu_1249_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        gmem_addr_2_read_reg_1972 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln58_reg_1936_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_addr_3_read_reg_1977 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        gmem_addr_3_reg_1961 <= zext_ln66_1_fu_1202_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state106))) begin
        gmem_addr_read_reg_2019 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i_reg_1707 <= i_fu_869_p2;
        select_ln1598_5_reg_1713 <= select_ln1598_5_fu_879_p3;
        select_ln43_reg_1720 <= select_ln43_fu_887_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_1665 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        icmp_ln43_reg_1689 <= icmp_ln43_fu_845_p2;
        select_ln1598_4_reg_1699 <= select_ln1598_4_fu_855_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln58_reg_1936 <= icmp_ln58_fu_1147_p2;
        icmp_ln58_reg_1936_pp0_iter1_reg <= icmp_ln58_reg_1936;
        icmp_ln58_reg_1936_pp0_iter2_reg <= icmp_ln58_reg_1936_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln55_1_reg_1868 == 1'd0) & (1'b1 == ap_CS_fsm_state64))) begin
        icmp_ln887_reg_1907 <= icmp_ln887_fu_1131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        jj_reg_1992 <= jj_fu_1218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1598_4_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        mul_ln1352_2_reg_1740 <= grp_fu_1334_p2;
        mul_ln68_2_reg_1745 <= grp_fu_1339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1598_4_reg_1699 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        mul_ln1352_3_reg_1761 <= grp_fu_917_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        mul_ln1598_1_reg_1892 <= grp_fu_1117_p2;
        mul_ln1598_3_reg_1897 <= grp_fu_1353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        mul_ln1598_2_reg_1857 <= mul_ln1598_2_fu_1060_p2;
        or_ln55_1_reg_1868 <= or_ln55_1_fu_1105_p2;
        select_ln1598_8_reg_1846 <= select_ln1598_8_fu_1042_p3;
        select_ln1598_9_reg_1852 <= select_ln1598_9_fu_1049_p3;
        w_V_reg_1862 <= w_V_fu_1086_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        mul_ln1598_reg_1877 <= grp_fu_1348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1598_4_reg_1699 == 1'd0) & (icmp_ln43_reg_1689 == 1'd0) & (1'b1 == ap_CS_fsm_state47))) begin
        mul_ln68_reg_1735 <= grp_fu_1329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ret_V_1_reg_1674 <= grp_fu_1318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ret_V_2_reg_1684 <= grp_fu_840_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        ret_V_5_reg_1916 <= grp_fu_1358_p3;
        tmp_reg_1921 <= grp_fu_1364_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        rhs_V_11_cast3_reg_1563[15 : 0] <= rhs_V_11_cast3_fu_757_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        rhs_V_1_cast_reg_1545[15 : 0] <= rhs_V_1_cast_fu_751_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        sdiv_ln1371_1_reg_1528 <= grp_fu_727_p2;
        sdiv_ln1371_reg_1523 <= grp_fu_715_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        select_ln1598_1_reg_1766 <= select_ln1598_1_fu_928_p3;
        select_ln1598_7_reg_1782 <= select_ln1598_7_fu_949_p3;
        zext_ln1598_1_reg_1787[15 : 0] <= zext_ln1598_1_fu_955_p1[15 : 0];
        zext_ln1598_2_reg_1771[15 : 0] <= zext_ln1598_2_fu_935_p1[15 : 0];
        zext_ln1598_3_reg_1776[15 : 0] <= zext_ln1598_3_fu_939_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln29_1_reg_1476 <= select_ln29_1_fu_636_p3;
        select_ln29_reg_1470 <= select_ln29_fu_629_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state119))) begin
        select_ln73_reg_2031 <= select_ln73_fu_1305_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sub_ln1371_4_reg_1487 <= sub_ln1371_4_fu_670_p2;
        sub_ln1371_5_reg_1498 <= sub_ln1371_5_fu_703_p2;
        zext_ln1371_4_reg_1482[15 : 0] <= zext_ln1371_4_fu_654_p1[15 : 0];
        zext_ln1371_9_reg_1492[15 : 0] <= zext_ln1371_9_fu_687_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        sub_ln1598_reg_1755 <= sub_ln1598_fu_912_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        sub_ln68_reg_1730 <= grp_fu_1323_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        sum_reg_2024 <= grp_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        tmp1645_reg_1931 <= grp_fu_1142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln58_reg_1936_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tp_reg_1982 <= grp_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        xor_ln55_reg_1807 <= xor_ln55_fu_986_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state88 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state88 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_1665 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_op_assign_phi_fu_416_p4 = cin_reg_1967;
    end else begin
        ap_phi_mux_i_op_assign_phi_fu_416_p4 = i_op_assign_reg_412;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_ret_V_8_phi_fu_428_p4 = add_ln1352_reg_1946;
    end else begin
        ap_phi_mux_ret_V_8_phi_fu_428_p4 = ret_V_8_reg_424;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_1665 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state99))) begin
        gmem_ARADDR = zext_ln72_fu_1223_p1;
    end else if (((icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        gmem_ARADDR = gmem_addr_3_reg_1961;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln58_reg_1936 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_ARADDR = gmem_addr_2_reg_1940;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state99)) | ((icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln58_reg_1936 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state119))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state125))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state106)) | ((1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln58_reg_1936_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state120))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state99) | ((1'b0 == ap_block_pp0_stage3) & (icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln58_reg_1936 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state106) | ((1'b0 == ap_block_pp0_stage8) & (icmp_ln58_reg_1936 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln58_reg_1936_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state120)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state55) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state99)))) begin
        grp_fu_1343_ce = 1'b1;
    end else begin
        grp_fu_1343_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        grp_fu_462_ce = 1'b1;
    end else begin
        grp_fu_462_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_fu_462_p0 = sum_1_reg_400;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7))) begin
        grp_fu_462_p0 = sum_2_reg_435;
    end else begin
        grp_fu_462_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        grp_fu_462_p1 = gmem_addr_read_reg_2019;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7))) begin
        grp_fu_462_p1 = tp_reg_1982;
    end else begin
        grp_fu_462_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        grp_fu_468_ce = 1'b1;
    end else begin
        grp_fu_468_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state119)))) begin
        grp_fu_472_ce = 1'b1;
    end else begin
        grp_fu_472_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_715_ap_start = 1'b1;
    end else begin
        grp_fu_715_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_727_ap_start = 1'b1;
    end else begin
        grp_fu_727_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln41_reg_1665 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((icmp_ln49_reg_1798 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((icmp_ln887_fu_1131_p2 == 1'd1) & (or_ln55_1_reg_1868 == 1'd0) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((~((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage7_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state99 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state99))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state106))) begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state119))) begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end
        end
        ap_ST_fsm_state120 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state120))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state125))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state125;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Wout_V_fu_736_p2 = (16'd1 + trunc_ln214_fu_733_p1);

assign add_ln1352_fu_1176_p2 = (zext_ln41_reg_1639 + ap_phi_mux_ret_V_8_phi_fu_428_p4);

assign add_ln1371_1_fu_593_p2 = ($signed(9'd511) + $signed(zext_ln1371_1_reg_1460));

assign add_ln1371_2_fu_657_p2 = (zext_ln1371_4_fu_654_p1 + zext_ln1371_2_fu_650_p1);

assign add_ln1371_3_fu_690_p2 = (zext_ln1371_9_fu_687_p1 + zext_ln1371_8_fu_683_p1);

assign add_ln1371_fu_557_p2 = ($signed(9'd511) + $signed(zext_ln1371_reg_1450));

assign add_ln41_1_fu_831_p2 = (indvar_flatten32_reg_306 + 48'd1);

assign add_ln41_2_fu_922_p2 = (i_op_assign_15_reg_329 + 16'd1);

assign add_ln41_fu_745_p2 = (16'd1 + empty_fu_742_p1);

assign add_ln43_1_fu_1029_p2 = (32'd1 + indvar_flatten7_reg_341);

assign add_ln49_1_fu_997_p2 = (i_op_assign_18_reg_376 + 8'd1);

assign add_ln49_fu_972_p2 = (indvar_flatten_reg_365 + 16'd1);

assign add_ln544_1_fu_1236_p2 = (select_ln1598_7_reg_1782 + zext_ln544_fu_1233_p1);

assign add_ln544_2_fu_1181_p2 = (zext_ln1598_3_reg_1776 + ap_phi_mux_ret_V_8_phi_fu_428_p4);

assign add_ln544_3_fu_1189_p2 = (tmp1645_reg_1931 + zext_ln544_1_fu_1186_p1);

assign add_ln66_1_fu_1197_p2 = (zext_ln66_fu_1194_p1 + p_cast27_reg_1586);

assign add_ln66_fu_1161_p2 = (ret_V_6_fu_1156_p2 + p_cast_reg_1591);

assign add_ln68_1_fu_1007_p2 = (zext_ln68_5_fu_1003_p1 + sub_ln1598_reg_1755);

assign add_ln72_fu_1020_p2 = (p_cast28_reg_1581 + zext_ln1598_2_reg_1771);

assign add_ln76_fu_1244_p2 = (p_cast29_reg_1576 + zext_ln76_fu_1241_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd82];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((gmem_RVALID == 1'b0) & (icmp_ln58_reg_1936_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state73_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((gmem_RVALID == 1'b0) & (icmp_ln58_reg_1936_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state73_io)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state75_io));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state75_io));
end

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln58_reg_1936 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln58_reg_1936 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state72_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_io = ((gmem_ARREADY == 1'b0) & (icmp_ln58_reg_1936 == 1'd0));
end

assign ap_block_state73_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75_io = ((gmem_ARREADY == 1'b0) & (icmp_ln58_reg_1936 == 1'd0));
end

assign ap_block_state75_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state80_pp0_stage8_iter0 = ((gmem_RVALID == 1'b0) & (icmp_ln58_reg_1936 == 1'd0));
end

assign ap_block_state81_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state82_pp0_stage1_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln58_reg_1936_pp0_iter1_reg == 1'd0));
end

assign ap_block_state83_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln73_fu_1259_p1 = sum_reg_2024;

assign bound_fu_811_p0 = bound_fu_811_p00;

assign bound_fu_811_p00 = Ky_V_read_reg_1393;

assign bound_fu_811_p1 = bound_fu_811_p10;

assign bound_fu_811_p10 = Kx_V_read_reg_1399;

assign bound_fu_811_p2 = (bound_fu_811_p0 * bound_fu_811_p1);

assign cin_fu_1212_p2 = (i_op_assign_reg_412 + 16'd1);

assign empty_fu_742_p1 = sdiv_ln1371_1_reg_1528[15:0];

assign grp_fu_1117_p0 = rhs_V_2_reg_1624;

assign grp_fu_1142_p0 = grp_fu_1142_p00;

assign grp_fu_1142_p00 = tmp_reg_1921;

assign grp_fu_1142_p1 = rhs_V_11_cast3_reg_1563;

assign grp_fu_1312_p0 = grp_fu_1312_p00;

assign grp_fu_1312_p00 = add_ln41_reg_1540;

assign grp_fu_1312_p1 = grp_fu_1312_p10;

assign grp_fu_1312_p10 = Wout_V_reg_1533;

assign grp_fu_1318_p0 = grp_fu_1318_p00;

assign grp_fu_1318_p00 = $unsigned(i_op_assign_16_reg_317);

assign grp_fu_1318_p1 = rhs_V_1_cast_reg_1545;

assign grp_fu_1323_p0 = ((or_ln1598_fu_875_p2[0:0] === 1'b1) ? 16'd0 : i_op_assign_17_reg_353);

assign grp_fu_1323_p1 = zext_ln68_3_reg_1619;

assign grp_fu_1323_p2 = zext_ln68_1_reg_1601;

assign grp_fu_1329_p0 = zext_ln68_2_reg_1613;

assign grp_fu_1334_p0 = grp_fu_1334_p00;

assign grp_fu_1334_p00 = $unsigned(i_reg_1707);

assign grp_fu_1334_p1 = rhs_V_1_cast_reg_1545;

assign grp_fu_1339_p1 = zext_ln68_2_reg_1613;

assign grp_fu_1343_p0 = zext_ln41_reg_1639;

assign grp_fu_1343_p1 = zext_ln1598_1_reg_1787;

assign grp_fu_1343_p2 = zext_ln1598_3_reg_1776;

assign grp_fu_1348_p0 = rhs_V_1_reg_1606;

assign grp_fu_1353_p0 = rhs_V_1_reg_1606;

assign grp_fu_1353_p1 = grp_fu_1353_p10;

assign grp_fu_1353_p10 = mul_ln1598_2_reg_1857;

assign grp_fu_1358_p1 = rhs_V_1_reg_1606;

assign grp_fu_1364_p0 = grp_fu_1364_p00;

assign grp_fu_1364_p00 = select_ln1598_8_reg_1846;

assign grp_fu_1364_p1 = zext_ln215_2_reg_1634;

assign grp_fu_715_p0 = $signed(sub_ln1371_4_reg_1487);

assign grp_fu_715_p1 = grp_fu_715_p10;

assign grp_fu_715_p10 = Sx_V_read_reg_1387;

assign grp_fu_727_p0 = $signed(sub_ln1371_5_reg_1498);

assign grp_fu_727_p1 = grp_fu_727_p10;

assign grp_fu_727_p10 = Sy_V_read_reg_1381;

assign grp_fu_763_p0 = grp_fu_763_p00;

assign grp_fu_763_p00 = CHout_V_read_reg_1406;

assign grp_fu_763_p1 = grp_fu_763_p10;

assign grp_fu_763_p10 = bound4_reg_1557;

assign grp_fu_840_p0 = grp_fu_840_p00;

assign grp_fu_840_p00 = ret_V_1_reg_1674;

assign grp_fu_840_p1 = rhs_V_11_cast3_reg_1563;

assign grp_fu_917_p0 = grp_fu_917_p00;

assign grp_fu_917_p00 = mul_ln1352_2_reg_1740;

assign grp_fu_917_p1 = rhs_V_11_cast3_reg_1563;

assign h_V_fu_962_p2 = (zext_ln68_4_fu_958_p1 + sub_ln1598_reg_1755);

assign i_fu_869_p2 = (select_ln1598_fu_862_p3 + 16'd1);

assign icmp_ln41_fu_826_p2 = ((indvar_flatten32_reg_306 == bound13_reg_1650) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_845_p2 = ((indvar_flatten7_reg_341 == bound4_reg_1557) ? 1'b1 : 1'b0);

assign icmp_ln45_1_fu_850_p2 = ((i_op_assign_17_reg_353 == Wout_V_reg_1533) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_817_p2 = ((Wout_V_reg_1533 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_967_p2 = ((indvar_flatten_reg_365 == bound_reg_1645) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_992_p2 = ((i_op_assign_19_reg_388 == Kx_V_read_reg_1399) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_1065_p2 = (($signed(sext_ln1352_1_fu_1054_p1) < $signed(zext_ln1371_9_reg_1492)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_981_p2 = (($signed(sext_ln1352_fu_978_p1) < $signed(zext_ln1371_9_reg_1492)) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_1147_p2 = ((ap_phi_mux_i_op_assign_phi_fu_416_p4 == CHin_V_read_reg_1423) ? 1'b1 : 1'b0);

assign icmp_ln73_1_fu_1282_p2 = ((trunc_ln73_fu_1272_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_1276_p2 = ((tmp_7_fu_1262_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_1131_p2 = (($signed(sext_ln887_1_fu_1128_p1) < $signed(zext_ln1371_4_reg_1482)) ? 1'b1 : 1'b0);

assign j_fu_1024_p2 = ($signed(16'd1) + $signed(select_ln1598_5_reg_1713));

assign jj_fu_1218_p2 = (select_ln1598_8_reg_1846 + 8'd1);

assign mul_ln1598_2_fu_1060_p0 = zext_ln215_1_reg_1629;

assign mul_ln1598_2_fu_1060_p1 = mul_ln1598_2_fu_1060_p10;

assign mul_ln1598_2_fu_1060_p10 = select_ln1598_10_reg_1825;

assign mul_ln1598_2_fu_1060_p2 = (mul_ln1598_2_fu_1060_p0 * mul_ln1598_2_fu_1060_p1);

assign or_ln1598_fu_875_p2 = (select_ln1598_4_reg_1699 | icmp_ln43_reg_1689);

assign or_ln55_1_fu_1105_p2 = (tmp_12_fu_1097_p3 | select_ln1598_11_fu_1076_p3);

assign or_ln55_fu_1091_p2 = (w_V_fu_1086_p2 | select_ln1598_9_fu_1049_p3);

assign or_ln73_fu_1288_p2 = (icmp_ln73_fu_1276_p2 | icmp_ln73_1_fu_1282_p2);

assign p_cast27_fu_775_p1 = tmp_4_reg_1440;

assign p_cast28_fu_772_p1 = tmp_2_reg_1435;

assign p_cast29_fu_769_p1 = tmp_1_reg_1430;

assign p_cast_fu_778_p1 = tmp_9_reg_1445;

assign pad_x_V_fu_585_p3 = ((tmp_10_fu_562_p3[0:0] === 1'b1) ? sub_ln1371_1_fu_580_p2 : trunc_ln1371_2_fu_570_p4);

assign pad_y_V_fu_621_p3 = ((tmp_11_fu_598_p3[0:0] === 1'b1) ? sub_ln1371_3_fu_616_p2 : trunc_ln1371_5_fu_606_p4);

assign ret_V_6_fu_1156_p2 = ($signed(zext_ln215_fu_1152_p1) + $signed(ret_V_5_reg_1916));

assign ret_V_fu_1300_p2 = (rhs_V_fu_1294_p2 & relu_en_V_read_reg_1370);

assign rhs_V_11_cast3_fu_757_p1 = CHout_V_read_reg_1406;

assign rhs_V_1_cast_fu_751_p1 = Wout_V_reg_1533;

assign rhs_V_1_fu_787_p1 = CHin_V_read_reg_1423;

assign rhs_V_2_fu_796_p1 = Win_V_read_reg_1412;

assign rhs_V_fu_1294_p2 = (or_ln73_fu_1288_p2 & grp_fu_472_p2);

assign select_ln1598_10_fu_1012_p3 = ((icmp_ln51_fu_992_p2[0:0] === 1'b1) ? add_ln49_1_fu_997_p2 : i_op_assign_18_reg_376);

assign select_ln1598_11_fu_1076_p3 = ((icmp_ln51_reg_1812[0:0] === 1'b1) ? xor_ln55_1_fu_1070_p2 : xor_ln55_reg_1807);

assign select_ln1598_1_fu_928_p3 = ((icmp_ln43_reg_1689[0:0] === 1'b1) ? add_ln41_2_fu_922_p2 : i_op_assign_15_reg_329);

assign select_ln1598_2_fu_897_p3 = ((icmp_ln43_reg_1689[0:0] === 1'b1) ? 16'd0 : mul_ln68_reg_1735);

assign select_ln1598_3_fu_943_p3 = ((icmp_ln43_reg_1689[0:0] === 1'b1) ? 48'd0 : ret_V_2_reg_1684);

assign select_ln1598_4_fu_855_p3 = ((icmp_ln43_fu_845_p2[0:0] === 1'b1) ? icmp_ln45_reg_1655 : icmp_ln45_1_fu_850_p2);

assign select_ln1598_5_fu_879_p3 = ((or_ln1598_fu_875_p2[0:0] === 1'b1) ? 16'd0 : i_op_assign_17_reg_353);

assign select_ln1598_6_fu_906_p3 = ((select_ln1598_4_reg_1699[0:0] === 1'b1) ? mul_ln68_2_reg_1745 : select_ln1598_2_fu_897_p3);

assign select_ln1598_7_fu_949_p3 = ((select_ln1598_4_reg_1699[0:0] === 1'b1) ? mul_ln1352_3_reg_1761 : select_ln1598_3_fu_943_p3);

assign select_ln1598_8_fu_1042_p3 = ((icmp_ln51_reg_1812[0:0] === 1'b1) ? 8'd0 : i_op_assign_19_reg_388);

assign select_ln1598_9_fu_1049_p3 = ((icmp_ln51_reg_1812[0:0] === 1'b1) ? add_ln68_1_reg_1819 : h_V_reg_1792);

assign select_ln1598_fu_862_p3 = ((icmp_ln43_reg_1689[0:0] === 1'b1) ? 16'd0 : i_op_assign_16_reg_317);

assign select_ln29_1_fu_636_p3 = ((mode_V_read_reg_1375[0:0] === 1'b1) ? pad_y_V_fu_621_p3 : 8'd0);

assign select_ln29_fu_629_p3 = ((mode_V_read_reg_1375[0:0] === 1'b1) ? pad_x_V_fu_585_p3 : 8'd0);

assign select_ln43_1_fu_1035_p3 = ((icmp_ln43_reg_1689[0:0] === 1'b1) ? 32'd1 : add_ln43_1_fu_1029_p2);

assign select_ln43_fu_887_p3 = ((select_ln1598_4_reg_1699[0:0] === 1'b1) ? i_fu_869_p2 : select_ln1598_fu_862_p3);

assign select_ln73_fu_1305_p3 = ((ret_V_fu_1300_p2[0:0] === 1'b1) ? 32'd0 : sum_reg_2024);

assign sext_ln1352_1_fu_1054_p1 = add_ln68_1_reg_1819;

assign sext_ln1352_fu_978_p1 = h_V_reg_1792;

assign sext_ln66_fu_1166_p1 = $signed(add_ln66_fu_1161_p2);

assign sext_ln887_1_fu_1128_p1 = w_V_reg_1862;

assign shl_ln1371_1_fu_676_p3 = {{select_ln29_1_reg_1476}, {1'd0}};

assign shl_ln_fu_643_p3 = {{select_ln29_reg_1470}, {1'd0}};

assign sub_ln1371_1_fu_580_p2 = (8'd0 - trunc_ln1371_1_reg_1455);

assign sub_ln1371_2_fu_541_p2 = (9'd1 - zext_ln1371_1_fu_537_p1);

assign sub_ln1371_3_fu_616_p2 = (8'd0 - trunc_ln1371_4_reg_1465);

assign sub_ln1371_4_fu_670_p2 = (zext_ln1371_5_fu_663_p1 - zext_ln1371_6_fu_667_p1);

assign sub_ln1371_5_fu_703_p2 = (zext_ln1371_10_fu_696_p1 - zext_ln1371_11_fu_700_p1);

assign sub_ln1371_fu_521_p2 = (9'd1 - zext_ln1371_fu_517_p1);

assign sub_ln1598_fu_912_p2 = (select_ln1598_6_fu_906_p3 - zext_ln68_reg_1596);

assign tmp_10_fu_562_p3 = add_ln1371_fu_557_p2[32'd8];

assign tmp_11_fu_598_p3 = add_ln1371_1_fu_593_p2[32'd8];

assign tmp_12_fu_1097_p3 = or_ln55_fu_1091_p2[32'd15];

assign tmp_7_fu_1262_p4 = {{bitcast_ln73_fu_1259_p1[30:23]}};

assign trunc_ln1371_2_fu_570_p4 = {{add_ln1371_fu_557_p2[8:1]}};

assign trunc_ln1371_5_fu_606_p4 = {{add_ln1371_1_fu_593_p2[8:1]}};

assign trunc_ln214_fu_733_p1 = sdiv_ln1371_reg_1523[15:0];

assign trunc_ln73_fu_1272_p1 = bitcast_ln73_fu_1259_p1[22:0];

assign w_V_fu_1086_p2 = ($signed(zext_ln68_6_fu_1082_p1) + $signed(sub_ln68_reg_1730));

assign xor_ln55_1_fu_1070_p2 = (icmp_ln55_1_fu_1065_p2 ^ 1'd1);

assign xor_ln55_fu_986_p2 = (icmp_ln55_fu_981_p2 ^ 1'd1);

assign zext_ln1371_10_fu_696_p1 = add_ln1371_3_fu_690_p2;

assign zext_ln1371_11_fu_700_p1 = Ky_V_read_reg_1393;

assign zext_ln1371_1_fu_537_p1 = Ky_V;

assign zext_ln1371_2_fu_650_p1 = shl_ln_fu_643_p3;

assign zext_ln1371_4_fu_654_p1 = Win_V_read_reg_1412;

assign zext_ln1371_5_fu_663_p1 = add_ln1371_2_fu_657_p2;

assign zext_ln1371_6_fu_667_p1 = Kx_V_read_reg_1399;

assign zext_ln1371_8_fu_683_p1 = shl_ln1371_1_fu_676_p3;

assign zext_ln1371_9_fu_687_p1 = Hin_V_read_reg_1418;

assign zext_ln1371_fu_517_p1 = Kx_V;

assign zext_ln1598_1_fu_955_p1 = $unsigned(select_ln1598_5_reg_1713);

assign zext_ln1598_2_fu_935_p1 = select_ln1598_1_fu_928_p3;

assign zext_ln1598_3_fu_939_p1 = select_ln1598_1_fu_928_p3;

assign zext_ln215_1_fu_799_p1 = Kx_V_read_reg_1399;

assign zext_ln215_2_fu_802_p1 = CHin_V_read_reg_1423;

assign zext_ln215_fu_1152_p1 = ap_phi_mux_i_op_assign_phi_fu_416_p4;

assign zext_ln41_fu_805_p1 = CHout_V_read_reg_1406;

assign zext_ln544_1_fu_1186_p1 = add_ln544_2_reg_1951;

assign zext_ln544_fu_1233_p1 = add_ln544_reg_2003;

assign zext_ln66_1_fu_1202_p1 = add_ln66_1_fu_1197_p2;

assign zext_ln66_fu_1194_p1 = add_ln544_3_reg_1956;

assign zext_ln68_1_fu_784_p1 = select_ln29_reg_1470;

assign zext_ln68_2_fu_790_p1 = Sy_V_read_reg_1381;

assign zext_ln68_3_fu_793_p1 = Sx_V_read_reg_1387;

assign zext_ln68_4_fu_958_p1 = i_op_assign_18_reg_376;

assign zext_ln68_5_fu_1003_p1 = add_ln49_1_fu_997_p2;

assign zext_ln68_6_fu_1082_p1 = select_ln1598_8_fu_1042_p3;

assign zext_ln68_fu_781_p1 = select_ln29_1_reg_1476;

assign zext_ln72_fu_1223_p1 = add_ln72_reg_1831;

assign zext_ln76_1_fu_1249_p1 = add_ln76_fu_1244_p2;

assign zext_ln76_fu_1241_p1 = add_ln544_1_reg_2008;

always @ (posedge ap_clk) begin
    zext_ln1371_reg_1450[8] <= 1'b0;
    zext_ln1371_1_reg_1460[8] <= 1'b0;
    zext_ln1371_4_reg_1482[16] <= 1'b0;
    zext_ln1371_9_reg_1492[16] <= 1'b0;
    rhs_V_1_cast_reg_1545[31:16] <= 16'b0000000000000000;
    rhs_V_11_cast3_reg_1563[47:16] <= 32'b00000000000000000000000000000000;
    p_cast29_reg_1576[48:30] <= 19'b0000000000000000000;
    p_cast28_reg_1581[30] <= 1'b0;
    p_cast27_reg_1586[48:30] <= 19'b0000000000000000000;
    p_cast_reg_1591[47:30] <= 18'b000000000000000000;
    zext_ln68_reg_1596[15:8] <= 8'b00000000;
    zext_ln68_1_reg_1601[15:8] <= 8'b00000000;
    rhs_V_1_reg_1606[31:16] <= 16'b0000000000000000;
    zext_ln68_2_reg_1613[15:8] <= 8'b00000000;
    zext_ln68_3_reg_1619[15:8] <= 8'b00000000;
    rhs_V_2_reg_1624[47:16] <= 32'b00000000000000000000000000000000;
    zext_ln215_1_reg_1629[15:8] <= 8'b00000000;
    zext_ln215_2_reg_1634[23:16] <= 8'b00000000;
    zext_ln41_reg_1639[31:16] <= 16'b0000000000000000;
    zext_ln1598_2_reg_1771[30:16] <= 15'b000000000000000;
    zext_ln1598_3_reg_1776[31:16] <= 16'b0000000000000000;
    zext_ln1598_1_reg_1787[31:16] <= 16'b0000000000000000;
end

endmodule //Conv
