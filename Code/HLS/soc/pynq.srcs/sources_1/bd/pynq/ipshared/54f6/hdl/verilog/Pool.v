// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Pool,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.556500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=21,HLS_SYN_FF=6344,HLS_SYN_LUT=5465,HLS_VERSION=2020_1}" *)

module Pool (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 97'd1;
parameter    ap_ST_fsm_state2 = 97'd2;
parameter    ap_ST_fsm_state3 = 97'd4;
parameter    ap_ST_fsm_state4 = 97'd8;
parameter    ap_ST_fsm_state5 = 97'd16;
parameter    ap_ST_fsm_state6 = 97'd32;
parameter    ap_ST_fsm_state7 = 97'd64;
parameter    ap_ST_fsm_state8 = 97'd128;
parameter    ap_ST_fsm_state9 = 97'd256;
parameter    ap_ST_fsm_state10 = 97'd512;
parameter    ap_ST_fsm_state11 = 97'd1024;
parameter    ap_ST_fsm_state12 = 97'd2048;
parameter    ap_ST_fsm_state13 = 97'd4096;
parameter    ap_ST_fsm_state14 = 97'd8192;
parameter    ap_ST_fsm_state15 = 97'd16384;
parameter    ap_ST_fsm_state16 = 97'd32768;
parameter    ap_ST_fsm_state17 = 97'd65536;
parameter    ap_ST_fsm_state18 = 97'd131072;
parameter    ap_ST_fsm_state19 = 97'd262144;
parameter    ap_ST_fsm_state20 = 97'd524288;
parameter    ap_ST_fsm_state21 = 97'd1048576;
parameter    ap_ST_fsm_state22 = 97'd2097152;
parameter    ap_ST_fsm_state23 = 97'd4194304;
parameter    ap_ST_fsm_state24 = 97'd8388608;
parameter    ap_ST_fsm_state25 = 97'd16777216;
parameter    ap_ST_fsm_state26 = 97'd33554432;
parameter    ap_ST_fsm_state27 = 97'd67108864;
parameter    ap_ST_fsm_state28 = 97'd134217728;
parameter    ap_ST_fsm_state29 = 97'd268435456;
parameter    ap_ST_fsm_state30 = 97'd536870912;
parameter    ap_ST_fsm_state31 = 97'd1073741824;
parameter    ap_ST_fsm_state32 = 97'd2147483648;
parameter    ap_ST_fsm_state33 = 97'd4294967296;
parameter    ap_ST_fsm_state34 = 97'd8589934592;
parameter    ap_ST_fsm_state35 = 97'd17179869184;
parameter    ap_ST_fsm_state36 = 97'd34359738368;
parameter    ap_ST_fsm_state37 = 97'd68719476736;
parameter    ap_ST_fsm_state38 = 97'd137438953472;
parameter    ap_ST_fsm_state39 = 97'd274877906944;
parameter    ap_ST_fsm_state40 = 97'd549755813888;
parameter    ap_ST_fsm_state41 = 97'd1099511627776;
parameter    ap_ST_fsm_state42 = 97'd2199023255552;
parameter    ap_ST_fsm_state43 = 97'd4398046511104;
parameter    ap_ST_fsm_state44 = 97'd8796093022208;
parameter    ap_ST_fsm_state45 = 97'd17592186044416;
parameter    ap_ST_fsm_state46 = 97'd35184372088832;
parameter    ap_ST_fsm_state47 = 97'd70368744177664;
parameter    ap_ST_fsm_pp0_stage0 = 97'd140737488355328;
parameter    ap_ST_fsm_pp0_stage1 = 97'd281474976710656;
parameter    ap_ST_fsm_pp0_stage2 = 97'd562949953421312;
parameter    ap_ST_fsm_pp0_stage3 = 97'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage4 = 97'd2251799813685248;
parameter    ap_ST_fsm_pp0_stage5 = 97'd4503599627370496;
parameter    ap_ST_fsm_pp0_stage6 = 97'd9007199254740992;
parameter    ap_ST_fsm_pp0_stage7 = 97'd18014398509481984;
parameter    ap_ST_fsm_state77 = 97'd36028797018963968;
parameter    ap_ST_fsm_state78 = 97'd72057594037927936;
parameter    ap_ST_fsm_state79 = 97'd144115188075855872;
parameter    ap_ST_fsm_state80 = 97'd288230376151711744;
parameter    ap_ST_fsm_state81 = 97'd576460752303423488;
parameter    ap_ST_fsm_state82 = 97'd1152921504606846976;
parameter    ap_ST_fsm_state83 = 97'd2305843009213693952;
parameter    ap_ST_fsm_state84 = 97'd4611686018427387904;
parameter    ap_ST_fsm_state85 = 97'd9223372036854775808;
parameter    ap_ST_fsm_state86 = 97'd18446744073709551616;
parameter    ap_ST_fsm_state87 = 97'd36893488147419103232;
parameter    ap_ST_fsm_state88 = 97'd73786976294838206464;
parameter    ap_ST_fsm_state89 = 97'd147573952589676412928;
parameter    ap_ST_fsm_state90 = 97'd295147905179352825856;
parameter    ap_ST_fsm_state91 = 97'd590295810358705651712;
parameter    ap_ST_fsm_state92 = 97'd1180591620717411303424;
parameter    ap_ST_fsm_state93 = 97'd2361183241434822606848;
parameter    ap_ST_fsm_state94 = 97'd4722366482869645213696;
parameter    ap_ST_fsm_state95 = 97'd9444732965739290427392;
parameter    ap_ST_fsm_state96 = 97'd18889465931478580854784;
parameter    ap_ST_fsm_state97 = 97'd37778931862957161709568;
parameter    ap_ST_fsm_state98 = 97'd75557863725914323419136;
parameter    ap_ST_fsm_state99 = 97'd151115727451828646838272;
parameter    ap_ST_fsm_state100 = 97'd302231454903657293676544;
parameter    ap_ST_fsm_state101 = 97'd604462909807314587353088;
parameter    ap_ST_fsm_state102 = 97'd1208925819614629174706176;
parameter    ap_ST_fsm_state103 = 97'd2417851639229258349412352;
parameter    ap_ST_fsm_state104 = 97'd4835703278458516698824704;
parameter    ap_ST_fsm_state105 = 97'd9671406556917033397649408;
parameter    ap_ST_fsm_state106 = 97'd19342813113834066795298816;
parameter    ap_ST_fsm_state107 = 97'd38685626227668133590597632;
parameter    ap_ST_fsm_state108 = 97'd77371252455336267181195264;
parameter    ap_ST_fsm_state109 = 97'd154742504910672534362390528;
parameter    ap_ST_fsm_state110 = 97'd309485009821345068724781056;
parameter    ap_ST_fsm_state111 = 97'd618970019642690137449562112;
parameter    ap_ST_fsm_state112 = 97'd1237940039285380274899124224;
parameter    ap_ST_fsm_state113 = 97'd2475880078570760549798248448;
parameter    ap_ST_fsm_state114 = 97'd4951760157141521099596496896;
parameter    ap_ST_fsm_state115 = 97'd9903520314283042199192993792;
parameter    ap_ST_fsm_state116 = 97'd19807040628566084398385987584;
parameter    ap_ST_fsm_state117 = 97'd39614081257132168796771975168;
parameter    ap_ST_fsm_state118 = 97'd79228162514264337593543950336;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] CHin_V;
wire   [15:0] Hin_V;
wire   [15:0] Win_V;
wire   [7:0] Kx_V;
wire   [7:0] Ky_V;
wire   [1:0] mode_V;
wire   [31:0] feature_in;
wire   [31:0] feature_out;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage4;
reg   [0:0] icmp_ln37_reg_1333;
reg   [0:0] icmp_ln37_reg_1333_pp0_iter1_reg;
reg   [1:0] mode_V_read_reg_1039;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage3;
reg   [0:0] icmp_ln37_reg_1333_pp0_iter2_reg;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state112;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state113;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state118;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [15:0] indvar_flatten_reg_287;
reg   [7:0] i_op_assign_19_reg_299;
reg   [7:0] i_op_assign_20_reg_310;
reg   [31:0] sum_3_reg_321;
reg   [7:0] Ky_V_read_reg_1045;
reg   [7:0] Kx_V_read_reg_1050;
reg   [15:0] Win_V_read_reg_1056;
reg   [15:0] Hin_V_read_reg_1062;
reg   [15:0] CHin_V_read_reg_1067;
reg   [29:0] tmp_8_reg_1073;
reg   [29:0] tmp_9_reg_1078;
wire   [15:0] lhs_V_fu_398_p1;
reg   [15:0] lhs_V_reg_1083;
wire    ap_CS_fsm_state2;
wire   [15:0] rhs_V_fu_406_p1;
reg   [15:0] rhs_V_reg_1090;
wire   [15:0] grp_fu_401_p2;
reg   [15:0] ret_V_26_reg_1098;
wire    ap_CS_fsm_state21;
wire   [15:0] grp_fu_409_p2;
reg   [15:0] udiv_ln24_reg_1105;
wire   [15:0] ret_V_fu_414_p2;
reg   [15:0] ret_V_reg_1110;
wire   [31:0] rhs_V_1_cast_fu_418_p1;
reg   [31:0] rhs_V_1_cast_reg_1116;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_982_p2;
reg   [31:0] bound4_reg_1133;
wire    ap_CS_fsm_state24;
wire   [47:0] zext_ln215_fu_428_p1;
reg   [47:0] zext_ln215_reg_1139;
wire    ap_CS_fsm_state25;
wire   [48:0] p_cast20_fu_440_p1;
reg   [48:0] p_cast20_reg_1151;
wire    ap_CS_fsm_state29;
wire   [47:0] p_cast_fu_443_p1;
reg   [47:0] p_cast_reg_1156;
wire   [31:0] rhs_V_1_fu_446_p1;
reg   [31:0] rhs_V_1_reg_1163;
wire   [0:0] icmp_ln879_fu_449_p2;
reg   [0:0] icmp_ln879_reg_1172;
wire   [47:0] rhs_V_2_fu_454_p1;
reg   [47:0] rhs_V_2_reg_1176;
wire   [31:0] grp_fu_370_p1;
reg   [31:0] tmp_reg_1181;
wire   [31:0] select_ln30_fu_476_p3;
reg   [31:0] select_ln30_reg_1186;
wire   [47:0] grp_fu_434_p2;
reg   [47:0] bound11_reg_1191;
wire   [0:0] icmp_ln27_fu_484_p2;
reg   [0:0] icmp_ln27_reg_1196;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln24_fu_493_p2;
reg   [0:0] icmp_ln24_reg_1206;
wire   [47:0] add_ln24_fu_498_p2;
reg   [47:0] add_ln24_reg_1210;
wire   [31:0] grp_fu_988_p2;
reg   [31:0] ret_V_14_reg_1215;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire   [47:0] grp_fu_507_p2;
reg   [47:0] ret_V_15_reg_1225;
wire    ap_CS_fsm_state37;
wire   [0:0] icmp_ln26_fu_512_p2;
reg   [0:0] icmp_ln26_reg_1230;
wire   [0:0] select_ln243_4_fu_522_p3;
reg   [0:0] select_ln243_4_reg_1240;
(* use_dsp48 = "no" *) wire  signed [15:0] i_fu_536_p2;
reg  signed [15:0] i_reg_1248;
wire    ap_CS_fsm_state38;
wire   [15:0] select_ln26_fu_542_p3;
reg   [15:0] select_ln26_reg_1254;
wire    ap_CS_fsm_state39;
wire  signed [15:0] grp_fu_993_p2;
reg  signed [15:0] mul_ln68_reg_1264;
wire    ap_CS_fsm_state41;
wire   [31:0] grp_fu_998_p2;
reg   [31:0] mul_ln1352_3_reg_1269;
wire  signed [15:0] grp_fu_1003_p2;
reg  signed [15:0] mul_ln68_2_reg_1274;
wire    ap_CS_fsm_state42;
wire   [15:0] select_ln1598_1_fu_561_p3;
reg   [15:0] select_ln1598_1_reg_1284;
wire  signed [15:0] select_ln1598_fu_576_p3;
reg  signed [15:0] select_ln1598_reg_1289;
wire    ap_CS_fsm_state44;
wire   [47:0] grp_fu_567_p2;
reg   [47:0] mul_ln1352_4_reg_1296;
wire    ap_CS_fsm_state46;
wire   [15:0] select_ln243_1_fu_590_p3;
reg   [15:0] select_ln243_1_reg_1301;
wire    ap_CS_fsm_state47;
wire   [31:0] zext_ln243_fu_597_p1;
reg   [31:0] zext_ln243_reg_1306;
wire   [47:0] zext_ln243_1_fu_601_p1;
reg   [47:0] zext_ln243_1_reg_1311;
wire   [47:0] select_ln1598_2_fu_611_p3;
reg   [47:0] select_ln1598_2_reg_1318;
wire   [31:0] zext_ln1598_2_fu_617_p1;
reg   [31:0] zext_ln1598_2_reg_1323;
wire  signed [15:0] grp_fu_1007_p2;
reg  signed [15:0] mul_ln68_1_reg_1328;
wire   [0:0] icmp_ln37_fu_620_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state48_pp0_stage0_iter0;
wire    ap_block_state56_pp0_stage0_iter1;
wire    ap_block_state64_pp0_stage0_iter2;
wire    ap_block_state72_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln37_reg_1333_pp0_iter3_reg;
wire   [7:0] select_ln1598_3_fu_630_p3;
reg   [7:0] select_ln1598_3_reg_1337;
wire   [7:0] select_ln1598_4_fu_644_p3;
reg   [7:0] select_ln1598_4_reg_1343;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state49_pp0_stage1_iter0;
wire    ap_block_state57_pp0_stage1_iter1;
wire    ap_block_state65_pp0_stage1_iter2;
wire    ap_block_state73_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire  signed [31:0] grp_fu_1011_p2;
reg  signed [31:0] mul_ln1598_reg_1354;
wire    ap_block_state51_pp0_stage3_iter0;
wire    ap_block_state59_pp0_stage3_iter1;
reg    ap_predicate_op354_read_state67;
reg    ap_predicate_op355_read_state67;
reg    ap_predicate_op356_read_state67;
reg    ap_block_state67_pp0_stage3_iter2;
wire    ap_block_state75_pp0_stage3_iter3;
reg    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state53_pp0_stage5_iter0;
wire    ap_block_state61_pp0_stage5_iter1;
wire    ap_block_state69_pp0_stage5_iter2;
wire    ap_block_pp0_stage5_11001;
wire   [15:0] add_ln37_fu_672_p2;
reg   [15:0] add_ln37_reg_1364;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state55_pp0_stage7_iter0;
wire    ap_block_state63_pp0_stage7_iter1;
wire    ap_block_state71_pp0_stage7_iter2;
wire    ap_block_pp0_stage7_11001;
wire   [7:0] jj_fu_678_p2;
reg   [7:0] jj_reg_1369;
wire   [47:0] grp_fu_667_p2;
reg   [47:0] mul_ln1598_1_reg_1389;
wire  signed [47:0] grp_fu_1016_p3;
reg  signed [47:0] ret_V_24_reg_1396;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state50_pp0_stage2_iter0;
wire    ap_block_state58_pp0_stage2_iter1;
wire    ap_block_state66_pp0_stage2_iter2;
wire    ap_block_state74_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire  signed [47:0] grp_fu_1022_p3;
reg  signed [47:0] ret_V_21_reg_1401;
wire  signed [47:0] grp_fu_1028_p3;
reg  signed [47:0] ret_V_18_reg_1406;
reg   [31:0] gmem_addr_3_reg_1411;
reg   [31:0] gmem_addr_2_reg_1417;
reg   [31:0] gmem_addr_1_reg_1423;
reg   [31:0] gmem_addr_3_read_reg_1429;
reg   [31:0] gmem_addr_2_read_reg_1436;
reg   [31:0] gmem_addr_1_read_reg_1443;
wire   [0:0] grp_fu_373_p2;
reg   [0:0] tmp_7_reg_1448;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_4_reg_1453;
wire   [31:0] select_ln47_fu_842_p3;
reg   [31:0] select_ln47_reg_1458;
wire   [31:0] select_ln46_fu_931_p3;
reg   [31:0] select_ln46_reg_1463;
wire   [31:0] grp_fu_365_p2;
reg   [31:0] sum_reg_1468;
wire    ap_CS_fsm_state106;
wire   [15:0] j_fu_938_p2;
reg   [15:0] j_reg_1473;
wire    ap_CS_fsm_state107;
wire   [31:0] select_ln26_1_fu_949_p3;
reg   [31:0] select_ln26_1_reg_1478;
wire   [31:0] grp_fu_1034_p3;
reg   [31:0] add_ln544_reg_1483;
wire    ap_CS_fsm_state109;
wire   [47:0] add_ln544_1_fu_959_p2;
reg   [47:0] add_ln544_1_reg_1488;
wire    ap_CS_fsm_state110;
reg   [31:0] gmem_addr_reg_1493;
wire    ap_CS_fsm_state111;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state52_pp0_stage4_iter0;
wire    ap_block_state60_pp0_stage4_iter1;
reg    ap_predicate_op333_readreq_state60;
reg    ap_predicate_op334_readreq_state60;
reg    ap_predicate_op335_readreq_state60;
reg    ap_block_state60_io;
wire    ap_block_state68_pp0_stage4_iter2;
wire    ap_block_state76_pp0_stage4_iter3;
reg    ap_block_pp0_stage4_subdone;
reg    ap_condition_pp0_exit_iter2_state68;
reg   [47:0] indvar_flatten28_reg_228;
reg  signed [15:0] i_op_assign_17_reg_239;
reg   [15:0] op_assign_reg_251;
reg   [31:0] indvar_flatten6_reg_263;
reg   [15:0] i_op_assign_18_reg_275;
reg   [15:0] ap_phi_mux_indvar_flatten_phi_fu_291_p4;
wire    ap_block_pp0_stage0;
reg   [7:0] ap_phi_mux_i_op_assign_19_phi_fu_303_p4;
reg   [7:0] ap_phi_mux_i_op_assign_20_phi_fu_314_p4;
reg   [31:0] ap_phi_mux_sum_3_phi_fu_324_p4;
reg   [31:0] ap_phi_mux_sum_4_phi_fu_335_p8;
reg    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_359_p2;
reg   [31:0] ap_phi_reg_pp0_iter3_sum_4_reg_331;
wire   [31:0] ap_phi_reg_pp0_iter0_sum_4_reg_331;
reg   [31:0] ap_phi_reg_pp0_iter1_sum_4_reg_331;
reg   [31:0] ap_phi_reg_pp0_iter2_sum_4_reg_331;
reg   [31:0] sum_5_reg_347;
wire    ap_CS_fsm_state77;
wire  signed [63:0] sext_ln47_fu_712_p1;
wire  signed [63:0] sext_ln46_fu_731_p1;
wire  signed [63:0] sext_ln45_fu_750_p1;
wire   [63:0] zext_ln53_1_fu_972_p1;
wire   [31:0] grp_fu_370_p0;
reg   [31:0] grp_fu_373_p1;
wire    ap_block_pp0_stage5;
wire   [7:0] grp_fu_401_p1;
wire   [7:0] grp_fu_409_p1;
wire   [7:0] ret_V_fu_414_p0;
wire   [7:0] ret_V_fu_414_p1;
wire   [31:0] grp_fu_434_p0;
wire   [15:0] grp_fu_434_p1;
wire   [0:0] icmp_ln879_1_fu_457_p2;
wire   [0:0] or_ln30_fu_470_p2;
wire   [31:0] select_ln30_1_fu_462_p3;
wire   [31:0] grp_fu_507_p0;
wire   [15:0] grp_fu_507_p1;
wire   [0:0] icmp_ln27_1_fu_517_p2;
wire   [15:0] select_ln243_fu_529_p3;
wire   [15:0] select_ln243_2_fu_552_p3;
wire   [15:0] grp_fu_567_p0;
wire   [31:0] grp_fu_567_p1;
wire   [0:0] or_ln1598_fu_572_p2;
wire   [15:0] add_ln24_1_fu_584_p2;
wire   [47:0] select_ln243_3_fu_605_p3;
wire   [0:0] icmp_ln38_fu_625_p2;
wire   [7:0] add_ln37_1_fu_638_p2;
wire    ap_block_pp0_stage1;
wire   [15:0] zext_ln1598_3_fu_652_p1;
wire  signed [15:0] add_ln1598_fu_655_p2;
wire   [15:0] grp_fu_667_p1;
wire    ap_block_pp0_stage7;
wire   [15:0] zext_ln68_fu_683_p1;
(* use_dsp48 = "no" *) wire  signed [15:0] w_V_fu_686_p2;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_25_fu_703_p2;
wire   [47:0] add_ln47_fu_707_p2;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_22_fu_722_p2;
wire   [47:0] add_ln46_fu_726_p2;
(* use_dsp48 = "no" *) wire   [47:0] ret_V_19_fu_741_p2;
wire   [47:0] add_ln45_fu_745_p2;
wire   [31:0] bitcast_ln47_fu_760_p1;
wire   [31:0] bitcast_ln47_1_fu_778_p1;
wire   [7:0] tmp_5_fu_764_p4;
wire   [22:0] trunc_ln47_fu_774_p1;
wire   [0:0] icmp_ln47_1_fu_801_p2;
wire   [0:0] icmp_ln47_fu_795_p2;
wire   [7:0] tmp_6_fu_781_p4;
wire   [22:0] trunc_ln47_1_fu_791_p1;
wire   [0:0] icmp_ln47_3_fu_819_p2;
wire   [0:0] icmp_ln47_2_fu_813_p2;
wire   [0:0] or_ln47_fu_807_p2;
wire   [0:0] or_ln47_1_fu_825_p2;
wire   [0:0] and_ln47_fu_831_p2;
wire   [0:0] and_ln47_1_fu_837_p2;
wire   [31:0] bitcast_ln46_fu_849_p1;
wire   [31:0] bitcast_ln46_1_fu_867_p1;
wire   [7:0] tmp_2_fu_853_p4;
wire   [22:0] trunc_ln46_fu_863_p1;
wire   [0:0] icmp_ln46_1_fu_890_p2;
wire   [0:0] icmp_ln46_fu_884_p2;
wire   [7:0] tmp_3_fu_870_p4;
wire   [22:0] trunc_ln46_1_fu_880_p1;
wire   [0:0] icmp_ln46_3_fu_908_p2;
wire   [0:0] icmp_ln46_2_fu_902_p2;
wire   [0:0] or_ln46_fu_896_p2;
wire   [0:0] or_ln46_1_fu_914_p2;
wire   [0:0] and_ln46_fu_920_p2;
wire   [0:0] and_ln46_1_fu_926_p2;
wire   [31:0] add_ln26_1_fu_943_p2;
wire   [47:0] zext_ln544_fu_956_p1;
wire   [48:0] zext_ln53_fu_964_p1;
wire   [48:0] add_ln53_fu_967_p2;
wire   [15:0] grp_fu_982_p0;
wire   [15:0] grp_fu_982_p1;
wire   [15:0] grp_fu_988_p0;
wire   [15:0] grp_fu_988_p1;
wire   [7:0] grp_fu_993_p1;
wire   [15:0] grp_fu_998_p0;
wire   [15:0] grp_fu_998_p1;
wire   [7:0] grp_fu_1003_p0;
wire   [7:0] grp_fu_1007_p0;
wire    ap_CS_fsm_state45;
wire   [15:0] grp_fu_1011_p0;
wire   [15:0] grp_fu_1016_p1;
wire    ap_block_pp0_stage2;
wire   [15:0] grp_fu_1022_p1;
wire   [15:0] grp_fu_1028_p1;
wire   [15:0] grp_fu_1034_p0;
wire   [15:0] grp_fu_1034_p1;
wire   [15:0] grp_fu_1034_p2;
reg    grp_fu_359_ce;
wire    ap_block_state54_pp0_stage6_iter0;
wire    ap_block_state62_pp0_stage6_iter1;
wire    ap_block_state70_pp0_stage6_iter2;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage6;
reg    grp_fu_373_ce;
reg    ap_predicate_op364_fcmp_state69;
reg    ap_predicate_op365_fcmp_state69;
wire    ap_block_pp0_stage5_00001;
reg    grp_fu_401_ap_start;
wire    grp_fu_401_ap_done;
reg    grp_fu_409_ap_start;
wire    grp_fu_409_ap_done;
reg    grp_fu_667_ce;
reg    grp_fu_1011_ce;
reg    grp_fu_1016_ce;
reg    grp_fu_1022_ce;
reg    grp_fu_1028_ce;
reg   [96:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] grp_fu_401_p10;
wire   [15:0] grp_fu_409_p10;
wire   [47:0] grp_fu_434_p00;
wire   [47:0] grp_fu_434_p10;
wire   [47:0] grp_fu_507_p00;
wire   [47:0] grp_fu_567_p10;
wire   [31:0] grp_fu_982_p00;
wire   [31:0] grp_fu_982_p10;
wire   [31:0] grp_fu_988_p00;
wire   [31:0] grp_fu_998_p10;
reg    ap_condition_907;
reg    ap_condition_2018;

// power-on initialization
initial begin
#0 ap_CS_fsm = 97'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Pool_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
Pool_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .CHin_V(CHin_V),
    .Hin_V(Hin_V),
    .Win_V(Win_V),
    .Kx_V(Kx_V),
    .Ky_V(Ky_V),
    .mode_V(mode_V),
    .feature_in(feature_in),
    .feature_out(feature_out)
);

Pool_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
Pool_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_reg_1493),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(sum_5_reg_347),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

Pool_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_phi_mux_sum_3_phi_fu_324_p4),
    .din1(gmem_addr_1_read_reg_1443),
    .ce(grp_fu_359_ce),
    .dout(grp_fu_359_p2)
);

Pool_fdiv_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_fdiv_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_3_reg_321),
    .din1(tmp_reg_1181),
    .ce(1'b1),
    .dout(grp_fu_365_p2)
);

Pool_uitofp_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Pool_uitofp_32ns_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_370_p0),
    .ce(1'b1),
    .dout(grp_fu_370_p1)
);

Pool_fcmp_32ns_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
Pool_fcmp_32ns_32eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_3_reg_321),
    .din1(grp_fu_373_p1),
    .ce(grp_fu_373_ce),
    .opcode(5'd2),
    .dout(grp_fu_373_p2)
);

Pool_udiv_16ns_8nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Pool_udiv_16ns_8nfYi_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_401_ap_start),
    .done(grp_fu_401_ap_done),
    .din0(Win_V_read_reg_1056),
    .din1(grp_fu_401_p1),
    .ce(1'b1),
    .dout(grp_fu_401_p2)
);

Pool_udiv_16ns_8nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Pool_udiv_16ns_8nfYi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_409_ap_start),
    .done(grp_fu_409_ap_done),
    .din0(Hin_V_read_reg_1062),
    .din1(grp_fu_409_p1),
    .ce(1'b1),
    .dout(grp_fu_409_p2)
);

Pool_mul_32ns_16ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
Pool_mul_32ns_16ng8j_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_434_p0),
    .din1(grp_fu_434_p1),
    .ce(1'b1),
    .dout(grp_fu_434_p2)
);

Pool_mul_32ns_16ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
Pool_mul_32ns_16ng8j_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_507_p0),
    .din1(grp_fu_507_p1),
    .ce(1'b1),
    .dout(grp_fu_507_p2)
);

Pool_mul_16ns_32nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
Pool_mul_16ns_32nhbi_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_567_p0),
    .din1(grp_fu_567_p1),
    .ce(1'b1),
    .dout(grp_fu_567_p2)
);

Pool_mul_32s_16nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 48 ))
Pool_mul_32s_16nsibs_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_ln1598_reg_1354),
    .din1(grp_fu_667_p1),
    .ce(grp_fu_667_ce),
    .dout(grp_fu_667_p2)
);

Pool_mul_mul_16nsjbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_mul_16nsjbC_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_982_p0),
    .din1(grp_fu_982_p1),
    .ce(1'b1),
    .dout(grp_fu_982_p2)
);

Pool_mul_mul_16nsjbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_mul_16nsjbC_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_988_p0),
    .din1(grp_fu_988_p1),
    .ce(1'b1),
    .dout(grp_fu_988_p2)
);

Pool_mul_mul_16s_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
Pool_mul_mul_16s_kbM_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_op_assign_17_reg_239),
    .din1(grp_fu_993_p1),
    .ce(1'b1),
    .dout(grp_fu_993_p2)
);

Pool_mul_mul_16nsjbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_mul_16nsjbC_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_998_p0),
    .din1(grp_fu_998_p1),
    .ce(1'b1),
    .dout(grp_fu_998_p2)
);

Pool_mul_mul_8ns_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
Pool_mul_mul_8ns_lbW_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1003_p0),
    .din1(i_reg_1248),
    .ce(1'b1),
    .dout(grp_fu_1003_p2)
);

Pool_mul_mul_8ns_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
Pool_mul_mul_8ns_lbW_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1007_p0),
    .din1(select_ln1598_reg_1289),
    .ce(1'b1),
    .dout(grp_fu_1007_p2)
);

Pool_mul_mul_16nsmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mul_mul_16nsmb6_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1011_p0),
    .din1(add_ln1598_fu_655_p2),
    .ce(grp_fu_1011_ce),
    .dout(grp_fu_1011_p2)
);

Pool_mac_muladd_1ncg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Pool_mac_muladd_1ncg_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w_V_fu_686_p2),
    .din1(grp_fu_1016_p1),
    .din2(mul_ln1598_1_reg_1389),
    .ce(grp_fu_1016_ce),
    .dout(grp_fu_1016_p3)
);

Pool_mac_muladd_1ncg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Pool_mac_muladd_1ncg_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w_V_fu_686_p2),
    .din1(grp_fu_1022_p1),
    .din2(mul_ln1598_1_reg_1389),
    .ce(grp_fu_1022_ce),
    .dout(grp_fu_1022_p3)
);

Pool_mac_muladd_1ncg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 48 ),
    .dout_WIDTH( 48 ))
Pool_mac_muladd_1ncg_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w_V_fu_686_p2),
    .din1(grp_fu_1028_p1),
    .din2(mul_ln1598_1_reg_1389),
    .ce(grp_fu_1028_ce),
    .dout(grp_fu_1028_p3)
);

Pool_mac_muladd_1ocq #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
Pool_mac_muladd_1ocq_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1034_p0),
    .din1(grp_fu_1034_p1),
    .din2(grp_fu_1034_p2),
    .ce(1'b1),
    .dout(grp_fu_1034_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln37_reg_1333 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state47) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state68) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter2_state68) & (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (mode_V_read_reg_1039 == 2'd3) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0))) begin
        ap_phi_reg_pp0_iter2_sum_4_reg_331 <= sum_3_reg_321;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_sum_4_reg_331 <= ap_phi_reg_pp0_iter1_sum_4_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (mode_V_read_reg_1039 == 2'd2) & (icmp_ln37_reg_1333_pp0_iter3_reg == 1'd0))) begin
        ap_phi_reg_pp0_iter3_sum_4_reg_331 <= select_ln47_reg_1458;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (mode_V_read_reg_1039 == 2'd1) & (icmp_ln37_reg_1333_pp0_iter3_reg == 1'd0))) begin
        ap_phi_reg_pp0_iter3_sum_4_reg_331 <= select_ln46_reg_1463;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_sum_4_reg_331 <= ap_phi_reg_pp0_iter2_sum_4_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
        i_op_assign_17_reg_239 <= select_ln26_reg_1254;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        i_op_assign_17_reg_239 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
        i_op_assign_18_reg_275 <= j_reg_1473;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        i_op_assign_18_reg_275 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_1333 == 1'd0))) begin
        i_op_assign_19_reg_299 <= select_ln1598_4_reg_1343;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        i_op_assign_19_reg_299 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_1333 == 1'd0))) begin
        i_op_assign_20_reg_310 <= jj_reg_1369;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        i_op_assign_20_reg_310 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
        indvar_flatten28_reg_228 <= add_ln24_reg_1210;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        indvar_flatten28_reg_228 <= 48'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
        indvar_flatten6_reg_263 <= select_ln26_1_reg_1478;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        indvar_flatten6_reg_263 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_1333 == 1'd0))) begin
        indvar_flatten_reg_287 <= add_ln37_reg_1364;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        indvar_flatten_reg_287 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
        op_assign_reg_251 <= select_ln243_1_reg_1301;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        op_assign_reg_251 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln37_reg_1333_pp0_iter3_reg == 1'd0))) begin
        sum_3_reg_321 <= ap_phi_mux_sum_4_phi_fu_335_p8;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        sum_3_reg_321 <= select_ln30_reg_1186;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) & (icmp_ln879_reg_1172 == 1'd0))) begin
        sum_5_reg_347 <= sum_3_reg_321;
    end else if (((icmp_ln879_reg_1172 == 1'd1) & (1'b1 == ap_CS_fsm_state107))) begin
        sum_5_reg_347 <= sum_reg_1468;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        CHin_V_read_reg_1067 <= CHin_V;
        Hin_V_read_reg_1062 <= Hin_V;
        Kx_V_read_reg_1050 <= Kx_V;
        Ky_V_read_reg_1045 <= Ky_V;
        Win_V_read_reg_1056 <= Win_V;
        mode_V_read_reg_1039 <= mode_V;
        tmp_8_reg_1073 <= {{feature_out[31:2]}};
        tmp_9_reg_1078 <= {{feature_in[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        add_ln24_reg_1210 <= add_ln24_fu_498_p2;
        icmp_ln24_reg_1206 <= icmp_ln24_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln37_reg_1364 <= add_ln37_fu_672_p2;
        ap_phi_reg_pp0_iter1_sum_4_reg_331 <= ap_phi_reg_pp0_iter0_sum_4_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        add_ln544_1_reg_1488 <= add_ln544_1_fu_959_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        add_ln544_reg_1483 <= grp_fu_1034_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        bound11_reg_1191 <= grp_fu_434_p2;
        icmp_ln27_reg_1196 <= icmp_ln27_fu_484_p2;
        icmp_ln879_reg_1172 <= icmp_ln879_fu_449_p2;
        p_cast20_reg_1151[29 : 0] <= p_cast20_fu_440_p1[29 : 0];
        p_cast_reg_1156[29 : 0] <= p_cast_fu_443_p1[29 : 0];
        rhs_V_1_reg_1163[15 : 0] <= rhs_V_1_fu_446_p1[15 : 0];
        rhs_V_2_reg_1176[15 : 0] <= rhs_V_2_fu_454_p1[15 : 0];
        select_ln30_reg_1186[5 : 2] <= select_ln30_fu_476_p3[5 : 2];
select_ln30_reg_1186[7] <= select_ln30_fu_476_p3[7];
select_ln30_reg_1186[9] <= select_ln30_fu_476_p3[9];
select_ln30_reg_1186[13] <= select_ln30_fu_476_p3[13];
select_ln30_reg_1186[16 : 15] <= select_ln30_fu_476_p3[16 : 15];
select_ln30_reg_1186[21 : 20] <= select_ln30_fu_476_p3[21 : 20];
select_ln30_reg_1186[25 : 23] <= select_ln30_fu_476_p3[25 : 23];
select_ln30_reg_1186[28 : 27] <= select_ln30_fu_476_p3[28 : 27];
select_ln30_reg_1186[31 : 30] <= select_ln30_fu_476_p3[31 : 30];
        tmp_reg_1181 <= grp_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        bound4_reg_1133 <= grp_fu_982_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_predicate_op356_read_state67 == 1'b1))) begin
        gmem_addr_1_read_reg_1443 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode_V_read_reg_1039 == 2'd0) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_1_reg_1423 <= sext_ln45_fu_750_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_predicate_op355_read_state67 == 1'b1))) begin
        gmem_addr_2_read_reg_1436 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode_V_read_reg_1039 == 2'd1) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_2_reg_1417 <= sext_ln46_fu_731_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_predicate_op354_read_state67 == 1'b1))) begin
        gmem_addr_3_read_reg_1429 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode_V_read_reg_1039 == 2'd2) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0))) begin
        gmem_addr_3_reg_1411 <= sext_ln47_fu_712_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        gmem_addr_reg_1493 <= zext_ln53_1_fu_972_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        i_reg_1248 <= i_fu_536_p2;
        select_ln26_reg_1254 <= select_ln26_fu_542_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (icmp_ln24_reg_1206 == 1'd0))) begin
        icmp_ln26_reg_1230 <= icmp_ln26_fu_512_p2;
        select_ln243_4_reg_1240 <= select_ln243_4_fu_522_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln37_reg_1333 <= icmp_ln37_fu_620_p2;
        icmp_ln37_reg_1333_pp0_iter1_reg <= icmp_ln37_reg_1333;
        icmp_ln37_reg_1333_pp0_iter2_reg <= icmp_ln37_reg_1333_pp0_iter1_reg;
        icmp_ln37_reg_1333_pp0_iter3_reg <= icmp_ln37_reg_1333_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        j_reg_1473 <= j_fu_938_p2;
        select_ln26_1_reg_1478 <= select_ln26_1_fu_949_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln37_reg_1333 == 1'd0))) begin
        jj_reg_1369 <= jj_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lhs_V_reg_1083[7 : 0] <= lhs_V_fu_398_p1[7 : 0];
        rhs_V_reg_1090[7 : 0] <= rhs_V_fu_406_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln243_4_reg_1240 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
        mul_ln1352_3_reg_1269 <= grp_fu_998_p2;
        mul_ln68_2_reg_1274 <= grp_fu_1003_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln243_4_reg_1240 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        mul_ln1352_4_reg_1296 <= grp_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0))) begin
        mul_ln1598_1_reg_1389 <= grp_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln37_reg_1333 == 1'd0))) begin
        mul_ln1598_reg_1354 <= grp_fu_1011_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        mul_ln68_1_reg_1328 <= grp_fu_1007_p2;
        select_ln1598_2_reg_1318 <= select_ln1598_2_fu_611_p3;
        select_ln243_1_reg_1301 <= select_ln243_1_fu_590_p3;
        zext_ln1598_2_reg_1323[15 : 0] <= zext_ln1598_2_fu_617_p1[15 : 0];
        zext_ln243_1_reg_1311[15 : 0] <= zext_ln243_1_fu_601_p1[15 : 0];
        zext_ln243_reg_1306[15 : 0] <= zext_ln243_fu_597_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & (select_ln243_4_reg_1240 == 1'd0) & (icmp_ln26_reg_1230 == 1'd0))) begin
        mul_ln68_reg_1264 <= grp_fu_993_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ret_V_14_reg_1215 <= grp_fu_988_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ret_V_15_reg_1225 <= grp_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (mode_V_read_reg_1039 == 2'd0) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0))) begin
        ret_V_18_reg_1406 <= grp_fu_1028_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (mode_V_read_reg_1039 == 2'd1) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0))) begin
        ret_V_21_reg_1401 <= grp_fu_1022_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (mode_V_read_reg_1039 == 2'd2) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0))) begin
        ret_V_24_reg_1396 <= grp_fu_1016_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ret_V_26_reg_1098 <= grp_fu_401_p2;
        ret_V_reg_1110 <= ret_V_fu_414_p2;
        udiv_ln24_reg_1105 <= grp_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        rhs_V_1_cast_reg_1116[15 : 0] <= rhs_V_1_cast_fu_418_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        select_ln1598_1_reg_1284 <= select_ln1598_1_fu_561_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_fu_620_p2 == 1'd0))) begin
        select_ln1598_3_reg_1337 <= select_ln1598_3_fu_630_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_fu_620_p2 == 1'd0))) begin
        select_ln1598_4_reg_1343 <= select_ln1598_4_fu_644_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        select_ln1598_reg_1289 <= select_ln1598_fu_576_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode_V_read_reg_1039 == 2'd1) & (icmp_ln37_reg_1333_pp0_iter3_reg == 1'd0))) begin
        select_ln46_reg_1463 <= select_ln46_fu_931_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (mode_V_read_reg_1039 == 2'd2) & (icmp_ln37_reg_1333_pp0_iter3_reg == 1'd0))) begin
        select_ln47_reg_1458 <= select_ln47_fu_842_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        sum_reg_1468 <= grp_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode_V_read_reg_1039 == 2'd1) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0))) begin
        tmp_4_reg_1453 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (mode_V_read_reg_1039 == 2'd2) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0))) begin
        tmp_7_reg_1448 <= grp_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        zext_ln215_reg_1139[15 : 0] <= zext_ln215_fu_428_p1[15 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state68 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state68 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1206 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_1333 == 1'd0))) begin
        ap_phi_mux_i_op_assign_19_phi_fu_303_p4 = select_ln1598_4_reg_1343;
    end else begin
        ap_phi_mux_i_op_assign_19_phi_fu_303_p4 = i_op_assign_19_reg_299;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_1333 == 1'd0))) begin
        ap_phi_mux_i_op_assign_20_phi_fu_314_p4 = jj_reg_1369;
    end else begin
        ap_phi_mux_i_op_assign_20_phi_fu_314_p4 = i_op_assign_20_reg_310;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln37_reg_1333 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_291_p4 = add_ln37_reg_1364;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_291_p4 = indvar_flatten_reg_287;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln37_reg_1333_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4))) begin
        ap_phi_mux_sum_3_phi_fu_324_p4 = ap_phi_mux_sum_4_phi_fu_335_p8;
    end else begin
        ap_phi_mux_sum_3_phi_fu_324_p4 = sum_3_reg_321;
    end
end

always @ (*) begin
    if (((mode_V_read_reg_1039 == 2'd0) & (icmp_ln37_reg_1333_pp0_iter3_reg == 1'd0))) begin
        ap_phi_mux_sum_4_phi_fu_335_p8 = grp_fu_359_p2;
    end else begin
        ap_phi_mux_sum_4_phi_fu_335_p8 = ap_phi_reg_pp0_iter3_sum_4_reg_331;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1206 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_907)) begin
        if ((ap_predicate_op335_readreq_state60 == 1'b1)) begin
            gmem_ARADDR = gmem_addr_1_reg_1423;
        end else if ((ap_predicate_op334_readreq_state60 == 1'b1)) begin
            gmem_ARADDR = gmem_addr_2_reg_1417;
        end else if ((ap_predicate_op333_readreq_state60 == 1'b1)) begin
            gmem_ARADDR = gmem_addr_3_reg_1411;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_predicate_op335_readreq_state60 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_predicate_op334_readreq_state60 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_predicate_op333_readreq_state60 == 1'b1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state112))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_predicate_op356_read_state67 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_predicate_op355_read_state67 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_predicate_op354_read_state67 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state113))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (mode_V_read_reg_1039 == 2'd2) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (mode_V_read_reg_1039 == 2'd1) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (mode_V_read_reg_1039 == 2'd0) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode_V_read_reg_1039 == 2'd2) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode_V_read_reg_1039 == 2'd1) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (mode_V_read_reg_1039 == 2'd0) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_1011_ce = 1'b1;
    end else begin
        grp_fu_1011_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1016_ce = 1'b1;
    end else begin
        grp_fu_1016_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1022_ce = 1'b1;
    end else begin
        grp_fu_1022_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1028_ce = 1'b1;
    end else begin
        grp_fu_1028_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)))) begin
        grp_fu_359_ce = 1'b1;
    end else begin
        grp_fu_359_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)))) begin
        grp_fu_373_ce = 1'b1;
    end else begin
        grp_fu_373_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_2018)) begin
        if ((mode_V_read_reg_1039 == 2'd1)) begin
            grp_fu_373_p1 = gmem_addr_2_read_reg_1436;
        end else if ((mode_V_read_reg_1039 == 2'd2)) begin
            grp_fu_373_p1 = gmem_addr_3_read_reg_1429;
        end else begin
            grp_fu_373_p1 = 'bx;
        end
    end else begin
        grp_fu_373_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_401_ap_start = 1'b1;
    end else begin
        grp_fu_401_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_409_ap_start = 1'b1;
    end else begin
        grp_fu_409_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)))) begin
        grp_fu_667_ce = 1'b1;
    end else begin
        grp_fu_667_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln24_reg_1206 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & (icmp_ln879_reg_1172 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state112))) begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state113 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state113))) begin
                ap_NS_fsm = ap_ST_fsm_state114;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state118))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1598_fu_655_p2 = (zext_ln1598_3_fu_652_p1 + select_ln1598_1_reg_1284);

assign add_ln24_1_fu_584_p2 = (op_assign_reg_251 + 16'd1);

assign add_ln24_fu_498_p2 = (indvar_flatten28_reg_228 + 48'd1);

assign add_ln26_1_fu_943_p2 = (indvar_flatten6_reg_263 + 32'd1);

assign add_ln37_1_fu_638_p2 = (ap_phi_mux_i_op_assign_19_phi_fu_303_p4 + 8'd1);

assign add_ln37_fu_672_p2 = (indvar_flatten_reg_287 + 16'd1);

assign add_ln45_fu_745_p2 = (ret_V_19_fu_741_p2 + p_cast_reg_1156);

assign add_ln46_fu_726_p2 = (p_cast_reg_1156 + ret_V_22_fu_722_p2);

assign add_ln47_fu_707_p2 = (p_cast_reg_1156 + ret_V_25_fu_703_p2);

assign add_ln53_fu_967_p2 = (zext_ln53_fu_964_p1 + p_cast20_reg_1151);

assign add_ln544_1_fu_959_p2 = (select_ln1598_2_reg_1318 + zext_ln544_fu_956_p1);

assign and_ln46_1_fu_926_p2 = (tmp_4_reg_1453 & and_ln46_fu_920_p2);

assign and_ln46_fu_920_p2 = (or_ln46_fu_896_p2 & or_ln46_1_fu_914_p2);

assign and_ln47_1_fu_837_p2 = (tmp_7_reg_1448 & and_ln47_fu_831_p2);

assign and_ln47_fu_831_p2 = (or_ln47_fu_807_p2 & or_ln47_1_fu_825_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd55];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((gmem_RVALID == 1'b0) & (ap_predicate_op356_read_state67 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_predicate_op355_read_state67 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_predicate_op354_read_state67 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter2 == 1'b1) & (((gmem_RVALID == 1'b0) & (ap_predicate_op356_read_state67 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_predicate_op355_read_state67 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_predicate_op354_read_state67 == 1'b1))));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state60_io));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state60_io));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state60_io = (((gmem_ARREADY == 1'b0) & (ap_predicate_op335_readreq_state60 == 1'b1)) | ((gmem_ARREADY == 1'b0) & (ap_predicate_op334_readreq_state60 == 1'b1)) | ((gmem_ARREADY == 1'b0) & (ap_predicate_op333_readreq_state60 == 1'b1)));
end

assign ap_block_state60_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state67_pp0_stage3_iter2 = (((gmem_RVALID == 1'b0) & (ap_predicate_op356_read_state67 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_predicate_op355_read_state67 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_predicate_op354_read_state67 == 1'b1)));
end

assign ap_block_state68_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_2018 = ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_condition_907 = ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_sum_4_reg_331 = 'bx;

always @ (*) begin
    ap_predicate_op333_readreq_state60 = ((mode_V_read_reg_1039 == 2'd2) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op334_readreq_state60 = ((mode_V_read_reg_1039 == 2'd1) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op335_readreq_state60 = ((mode_V_read_reg_1039 == 2'd0) & (icmp_ln37_reg_1333_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op354_read_state67 = ((mode_V_read_reg_1039 == 2'd2) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op355_read_state67 = ((mode_V_read_reg_1039 == 2'd1) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op356_read_state67 = ((mode_V_read_reg_1039 == 2'd0) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op364_fcmp_state69 = ((mode_V_read_reg_1039 == 2'd2) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op365_fcmp_state69 = ((mode_V_read_reg_1039 == 2'd1) & (icmp_ln37_reg_1333_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln46_1_fu_867_p1 = gmem_addr_2_read_reg_1436;

assign bitcast_ln46_fu_849_p1 = sum_3_reg_321;

assign bitcast_ln47_1_fu_778_p1 = gmem_addr_3_read_reg_1429;

assign bitcast_ln47_fu_760_p1 = sum_3_reg_321;

assign grp_fu_1003_p0 = rhs_V_reg_1090;

assign grp_fu_1007_p0 = lhs_V_reg_1083;

assign grp_fu_1011_p0 = rhs_V_1_reg_1163;

assign grp_fu_1016_p1 = rhs_V_1_reg_1163;

assign grp_fu_1022_p1 = rhs_V_1_reg_1163;

assign grp_fu_1028_p1 = rhs_V_1_reg_1163;

assign grp_fu_1034_p0 = rhs_V_1_reg_1163;

assign grp_fu_1034_p1 = zext_ln1598_2_reg_1323;

assign grp_fu_1034_p2 = zext_ln243_reg_1306;

assign grp_fu_370_p0 = ret_V_reg_1110;

assign grp_fu_401_p1 = grp_fu_401_p10;

assign grp_fu_401_p10 = Kx_V_read_reg_1050;

assign grp_fu_409_p1 = grp_fu_409_p10;

assign grp_fu_409_p10 = Ky_V_read_reg_1045;

assign grp_fu_434_p0 = grp_fu_434_p00;

assign grp_fu_434_p00 = bound4_reg_1133;

assign grp_fu_434_p1 = grp_fu_434_p10;

assign grp_fu_434_p10 = CHin_V_read_reg_1067;

assign grp_fu_507_p0 = grp_fu_507_p00;

assign grp_fu_507_p00 = ret_V_14_reg_1215;

assign grp_fu_507_p1 = zext_ln215_reg_1139;

assign grp_fu_567_p0 = zext_ln215_reg_1139;

assign grp_fu_567_p1 = grp_fu_567_p10;

assign grp_fu_567_p10 = mul_ln1352_3_reg_1269;

assign grp_fu_667_p1 = rhs_V_2_reg_1176;

assign grp_fu_982_p0 = grp_fu_982_p00;

assign grp_fu_982_p00 = ret_V_26_reg_1098;

assign grp_fu_982_p1 = grp_fu_982_p10;

assign grp_fu_982_p10 = udiv_ln24_reg_1105;

assign grp_fu_988_p0 = grp_fu_988_p00;

assign grp_fu_988_p00 = $unsigned(i_op_assign_17_reg_239);

assign grp_fu_988_p1 = rhs_V_1_cast_reg_1116;

assign grp_fu_993_p1 = rhs_V_reg_1090;

assign grp_fu_998_p0 = rhs_V_1_cast_reg_1116;

assign grp_fu_998_p1 = grp_fu_998_p10;

assign grp_fu_998_p10 = $unsigned(i_reg_1248);

assign i_fu_536_p2 = (select_ln243_fu_529_p3 + 16'd1);

assign icmp_ln24_fu_493_p2 = ((indvar_flatten28_reg_228 == bound11_reg_1191) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_512_p2 = ((indvar_flatten6_reg_263 == bound4_reg_1133) ? 1'b1 : 1'b0);

assign icmp_ln27_1_fu_517_p2 = ((i_op_assign_18_reg_275 == ret_V_26_reg_1098) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_484_p2 = ((ret_V_26_reg_1098 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_620_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_291_p4 == ret_V_reg_1110) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_625_p2 = ((ap_phi_mux_i_op_assign_20_phi_fu_314_p4 == Kx_V_read_reg_1050) ? 1'b1 : 1'b0);

assign icmp_ln46_1_fu_890_p2 = ((trunc_ln46_fu_863_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_2_fu_902_p2 = ((tmp_3_fu_870_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln46_3_fu_908_p2 = ((trunc_ln46_1_fu_880_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_884_p2 = ((tmp_2_fu_853_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln47_1_fu_801_p2 = ((trunc_ln47_fu_774_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_2_fu_813_p2 = ((tmp_6_fu_781_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln47_3_fu_819_p2 = ((trunc_ln47_1_fu_791_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_795_p2 = ((tmp_5_fu_764_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_457_p2 = ((mode_V_read_reg_1039 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_449_p2 = ((mode_V_read_reg_1039 == 2'd0) ? 1'b1 : 1'b0);

assign j_fu_938_p2 = ($signed(select_ln1598_reg_1289) + $signed(16'd1));

assign jj_fu_678_p2 = (select_ln1598_3_reg_1337 + 8'd1);

assign lhs_V_fu_398_p1 = Kx_V_read_reg_1050;

assign or_ln1598_fu_572_p2 = (select_ln243_4_reg_1240 | icmp_ln26_reg_1230);

assign or_ln30_fu_470_p2 = (icmp_ln879_fu_449_p2 | icmp_ln879_1_fu_457_p2);

assign or_ln46_1_fu_914_p2 = (icmp_ln46_3_fu_908_p2 | icmp_ln46_2_fu_902_p2);

assign or_ln46_fu_896_p2 = (icmp_ln46_fu_884_p2 | icmp_ln46_1_fu_890_p2);

assign or_ln47_1_fu_825_p2 = (icmp_ln47_3_fu_819_p2 | icmp_ln47_2_fu_813_p2);

assign or_ln47_fu_807_p2 = (icmp_ln47_fu_795_p2 | icmp_ln47_1_fu_801_p2);

assign p_cast20_fu_440_p1 = tmp_8_reg_1073;

assign p_cast_fu_443_p1 = tmp_9_reg_1078;

assign ret_V_19_fu_741_p2 = ($signed(zext_ln243_1_reg_1311) + $signed(ret_V_18_reg_1406));

assign ret_V_22_fu_722_p2 = ($signed(zext_ln243_1_reg_1311) + $signed(ret_V_21_reg_1401));

assign ret_V_25_fu_703_p2 = ($signed(zext_ln243_1_reg_1311) + $signed(ret_V_24_reg_1396));

assign ret_V_fu_414_p0 = lhs_V_reg_1083;

assign ret_V_fu_414_p1 = rhs_V_reg_1090;

assign ret_V_fu_414_p2 = (ret_V_fu_414_p0 * ret_V_fu_414_p1);

assign rhs_V_1_cast_fu_418_p1 = ret_V_26_reg_1098;

assign rhs_V_1_fu_446_p1 = CHin_V_read_reg_1067;

assign rhs_V_2_fu_454_p1 = Win_V_read_reg_1056;

assign rhs_V_fu_406_p1 = Ky_V_read_reg_1045;

assign select_ln1598_1_fu_561_p3 = ((select_ln243_4_reg_1240[0:0] === 1'b1) ? mul_ln68_2_reg_1274 : select_ln243_2_fu_552_p3);

assign select_ln1598_2_fu_611_p3 = ((select_ln243_4_reg_1240[0:0] === 1'b1) ? mul_ln1352_4_reg_1296 : select_ln243_3_fu_605_p3);

assign select_ln1598_3_fu_630_p3 = ((icmp_ln38_fu_625_p2[0:0] === 1'b1) ? 8'd0 : ap_phi_mux_i_op_assign_20_phi_fu_314_p4);

assign select_ln1598_4_fu_644_p3 = ((icmp_ln38_fu_625_p2[0:0] === 1'b1) ? add_ln37_1_fu_638_p2 : ap_phi_mux_i_op_assign_19_phi_fu_303_p4);

assign select_ln1598_fu_576_p3 = ((or_ln1598_fu_572_p2[0:0] === 1'b1) ? 16'd0 : i_op_assign_18_reg_275);

assign select_ln243_1_fu_590_p3 = ((icmp_ln26_reg_1230[0:0] === 1'b1) ? add_ln24_1_fu_584_p2 : op_assign_reg_251);

assign select_ln243_2_fu_552_p3 = ((icmp_ln26_reg_1230[0:0] === 1'b1) ? 16'd0 : mul_ln68_reg_1264);

assign select_ln243_3_fu_605_p3 = ((icmp_ln26_reg_1230[0:0] === 1'b1) ? 48'd0 : ret_V_15_reg_1225);

assign select_ln243_4_fu_522_p3 = ((icmp_ln26_fu_512_p2[0:0] === 1'b1) ? icmp_ln27_reg_1196 : icmp_ln27_1_fu_517_p2);

assign select_ln243_fu_529_p3 = ((icmp_ln26_reg_1230[0:0] === 1'b1) ? 16'd0 : i_op_assign_17_reg_239);

assign select_ln26_1_fu_949_p3 = ((icmp_ln26_reg_1230[0:0] === 1'b1) ? 32'd1 : add_ln26_1_fu_943_p2);

assign select_ln26_fu_542_p3 = ((select_ln243_4_reg_1240[0:0] === 1'b1) ? i_fu_536_p2 : select_ln243_fu_529_p3);

assign select_ln30_1_fu_462_p3 = ((icmp_ln879_fu_449_p2[0:0] === 1'b1) ? 32'd0 : 32'd1538368188);

assign select_ln30_fu_476_p3 = ((or_ln30_fu_470_p2[0:0] === 1'b1) ? select_ln30_1_fu_462_p3 : 32'd3685851836);

assign select_ln46_fu_931_p3 = ((and_ln46_1_fu_926_p2[0:0] === 1'b1) ? gmem_addr_2_read_reg_1436 : sum_3_reg_321);

assign select_ln47_fu_842_p3 = ((and_ln47_1_fu_837_p2[0:0] === 1'b1) ? sum_3_reg_321 : gmem_addr_3_read_reg_1429);

assign sext_ln45_fu_750_p1 = $signed(add_ln45_fu_745_p2);

assign sext_ln46_fu_731_p1 = $signed(add_ln46_fu_726_p2);

assign sext_ln47_fu_712_p1 = $signed(add_ln47_fu_707_p2);

assign tmp_2_fu_853_p4 = {{bitcast_ln46_fu_849_p1[30:23]}};

assign tmp_3_fu_870_p4 = {{bitcast_ln46_1_fu_867_p1[30:23]}};

assign tmp_5_fu_764_p4 = {{bitcast_ln47_fu_760_p1[30:23]}};

assign tmp_6_fu_781_p4 = {{bitcast_ln47_1_fu_778_p1[30:23]}};

assign trunc_ln46_1_fu_880_p1 = bitcast_ln46_1_fu_867_p1[22:0];

assign trunc_ln46_fu_863_p1 = bitcast_ln46_fu_849_p1[22:0];

assign trunc_ln47_1_fu_791_p1 = bitcast_ln47_1_fu_778_p1[22:0];

assign trunc_ln47_fu_774_p1 = bitcast_ln47_fu_760_p1[22:0];

assign w_V_fu_686_p2 = ($signed(zext_ln68_fu_683_p1) + $signed(mul_ln68_1_reg_1328));

assign zext_ln1598_2_fu_617_p1 = $unsigned(select_ln1598_reg_1289);

assign zext_ln1598_3_fu_652_p1 = select_ln1598_4_reg_1343;

assign zext_ln215_fu_428_p1 = CHin_V_read_reg_1067;

assign zext_ln243_1_fu_601_p1 = select_ln243_1_fu_590_p3;

assign zext_ln243_fu_597_p1 = select_ln243_1_fu_590_p3;

assign zext_ln53_1_fu_972_p1 = add_ln53_fu_967_p2;

assign zext_ln53_fu_964_p1 = add_ln544_1_reg_1488;

assign zext_ln544_fu_956_p1 = add_ln544_reg_1483;

assign zext_ln68_fu_683_p1 = select_ln1598_3_reg_1337;

always @ (posedge ap_clk) begin
    lhs_V_reg_1083[15:8] <= 8'b00000000;
    rhs_V_reg_1090[15:8] <= 8'b00000000;
    rhs_V_1_cast_reg_1116[31:16] <= 16'b0000000000000000;
    zext_ln215_reg_1139[47:16] <= 32'b00000000000000000000000000000000;
    p_cast20_reg_1151[48:30] <= 19'b0000000000000000000;
    p_cast_reg_1156[47:30] <= 18'b000000000000000000;
    rhs_V_1_reg_1163[31:16] <= 16'b0000000000000000;
    rhs_V_2_reg_1176[47:16] <= 32'b00000000000000000000000000000000;
    select_ln30_reg_1186[1:0] <= 2'b00;
    select_ln30_reg_1186[6:6] <= 1'b0;
    select_ln30_reg_1186[8:8] <= 1'b0;
    select_ln30_reg_1186[12:10] <= 3'b000;
    select_ln30_reg_1186[14:14] <= 1'b0;
    select_ln30_reg_1186[19:17] <= 3'b000;
    select_ln30_reg_1186[22:22] <= 1'b0;
    select_ln30_reg_1186[26:26] <= 1'b0;
    select_ln30_reg_1186[29] <= 1'b0;
    zext_ln243_reg_1306[31:16] <= 16'b0000000000000000;
    zext_ln243_1_reg_1311[47:16] <= 32'b00000000000000000000000000000000;
    zext_ln1598_2_reg_1323[31:16] <= 16'b0000000000000000;
end

endmodule //Pool
